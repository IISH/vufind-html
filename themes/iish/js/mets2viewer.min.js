/*! jQuery UI - v1.9.2 - 2013-07-18
 * http://jqueryui.com
 * Includes: jquery.ui.core.js, jquery.ui.widget.js, jquery.ui.mouse.js, jquery.ui.draggable.js, jquery.ui.droppable.js
 * Copyright 2013 jQuery Foundation and other contributors Licensed MIT */

(function (e, t) {
    function i(t, n) {
        var r, i, o, u = t.nodeName.toLowerCase();
        return"area" === u ? (r = t.parentNode, i = r.name, !t.href || !i || r.nodeName.toLowerCase() !== "map" ? !1 : (o = e("img[usemap=#" + i + "]")[0], !!o && s(o))) : (/input|select|textarea|button|object/.test(u) ? !t.disabled : "a" === u ? t.href || n : n) && s(t)
    }

    function s(t) {
        return e.expr.filters.visible(t) && !e(t).parents().andSelf().filter(function () {
            return e.css(this, "visibility") === "hidden"
        }).length
    }

    var n = 0, r = /^ui-id-\d+$/;
    e.ui = e.ui || {};
    if (e.ui.version)return;
    e.extend(e.ui, {version: "1.9.2", keyCode: {BACKSPACE: 8, COMMA: 188, DELETE: 46, DOWN: 40, END: 35, ENTER: 13, ESCAPE: 27, HOME: 36, LEFT: 37, NUMPAD_ADD: 107, NUMPAD_DECIMAL: 110, NUMPAD_DIVIDE: 111, NUMPAD_ENTER: 108, NUMPAD_MULTIPLY: 106, NUMPAD_SUBTRACT: 109, PAGE_DOWN: 34, PAGE_UP: 33, PERIOD: 190, RIGHT: 39, SPACE: 32, TAB: 9, UP: 38}}), e.fn.extend({_focus: e.fn.focus, focus: function (t, n) {
        return typeof t == "number" ? this.each(function () {
            var r = this;
            setTimeout(function () {
                e(r).focus(), n && n.call(r)
            }, t)
        }) : this._focus.apply(this, arguments)
    }, scrollParent                                                                                                                                                                                                                                                                                                                                                               : function () {
        var t;
        return e.ui.ie && /(static|relative)/.test(this.css("position")) || /absolute/.test(this.css("position")) ? t = this.parents().filter(function () {
            return/(relative|absolute|fixed)/.test(e.css(this, "position")) && /(auto|scroll)/.test(e.css(this, "overflow") + e.css(this, "overflow-y") + e.css(this, "overflow-x"))
        }).eq(0) : t = this.parents().filter(function () {
            return/(auto|scroll)/.test(e.css(this, "overflow") + e.css(this, "overflow-y") + e.css(this, "overflow-x"))
        }).eq(0), /fixed/.test(this.css("position")) || !t.length ? e(document) : t
    }, zIndex                                                                                                                                                                                                                                                                                                                                                                     : function (n) {
        if (n !== t)return this.css("zIndex", n);
        if (this.length) {
            var r = e(this[0]), i, s;
            while (r.length && r[0] !== document) {
                i = r.css("position");
                if (i === "absolute" || i === "relative" || i === "fixed") {
                    s = parseInt(r.css("zIndex"), 10);
                    if (!isNaN(s) && s !== 0)return s
                }
                r = r.parent()
            }
        }
        return 0
    }, uniqueId                                                                                                                                                                                                                                                                                                                                                                   : function () {
        return this.each(function () {
            this.id || (this.id = "ui-id-" + ++n)
        })
    }, removeUniqueId                                                                                                                                                                                                                                                                                                                                                             : function () {
        return this.each(function () {
            r.test(this.id) && e(this).removeAttr("id")
        })
    }}), e.extend(e.expr[":"], {data: e.expr.createPseudo ? e.expr.createPseudo(function (t) {
        return function (n) {
            return!!e.data(n, t)
        }
    }) : function (t, n, r) {
        return!!e.data(t, r[3])
    }, focusable                    : function (t) {
        return i(t, !isNaN(e.attr(t, "tabindex")))
    }, tabbable                     : function (t) {
        var n = e.attr(t, "tabindex"), r = isNaN(n);
        return(r || n >= 0) && i(t, !r)
    }}), e(function () {
        var t = document.body, n = t.appendChild(n = document.createElement("div"));
        n.offsetHeight, e.extend(n.style, {minHeight: "100px", height: "auto", padding: 0, borderWidth: 0}), e.support.minHeight = n.offsetHeight === 100, e.support.selectstart = "onselectstart"in n, t.removeChild(n).style.display = "none"
    }), e("<a>").outerWidth(1).jquery || e.each(["Width", "Height"], function (n, r) {
        function u(t, n, r, s) {
            return e.each(i, function () {
                n -= parseFloat(e.css(t, "padding" + this)) || 0, r && (n -= parseFloat(e.css(t, "border" + this + "Width")) || 0), s && (n -= parseFloat(e.css(t, "margin" + this)) || 0)
            }), n
        }

        var i = r === "Width" ? ["Left", "Right"] : ["Top", "Bottom"], s = r.toLowerCase(), o = {innerWidth: e.fn.innerWidth, innerHeight: e.fn.innerHeight, outerWidth: e.fn.outerWidth, outerHeight: e.fn.outerHeight};
        e.fn["inner" + r] = function (n) {
            return n === t ? o["inner" + r].call(this) : this.each(function () {
                e(this).css(s, u(this, n) + "px")
            })
        }, e.fn["outer" + r] = function (t, n) {
            return typeof t != "number" ? o["outer" + r].call(this, t) : this.each(function () {
                e(this).css(s, u(this, t, !0, n) + "px")
            })
        }
    }), e("<a>").data("a-b", "a").removeData("a-b").data("a-b") && (e.fn.removeData = function (t) {
        return function (n) {
            return arguments.length ? t.call(this, e.camelCase(n)) : t.call(this)
        }
    }(e.fn.removeData)), function () {
        var t = /msie ([\w.]+)/.exec(navigator.userAgent.toLowerCase()) || [];
        e.ui.ie = t.length ? !0 : !1, e.ui.ie6 = parseFloat(t[1], 10) === 6
    }(), e.fn.extend({disableSelection: function () {
        return this.bind((e.support.selectstart ? "selectstart" : "mousedown") + ".ui-disableSelection", function (e) {
            e.preventDefault()
        })
    }, enableSelection                : function () {
        return this.unbind(".ui-disableSelection")
    }}), e.extend(e.ui, {plugin: {add: function (t, n, r) {
        var i, s = e.ui[t].prototype;
        for (i in r)s.plugins[i] = s.plugins[i] || [], s.plugins[i].push([n, r[i]])
    }, call                          : function (e, t, n) {
        var r, i = e.plugins[t];
        if (!i || !e.element[0].parentNode || e.element[0].parentNode.nodeType === 11)return;
        for (r = 0; r < i.length; r++)e.options[i[r][0]] && i[r][1].apply(e.element, n)
    }}, contains               : e.contains, hasScroll: function (t, n) {
        if (e(t).css("overflow") === "hidden")return!1;
        var r = n && n === "left" ? "scrollLeft" : "scrollTop", i = !1;
        return t[r] > 0 ? !0 : (t[r] = 1, i = t[r] > 0, t[r] = 0, i)
    }, isOverAxis              : function (e, t, n) {
        return e > t && e < t + n
    }, isOver                  : function (t, n, r, i, s, o) {
        return e.ui.isOverAxis(t, r, s) && e.ui.isOverAxis(n, i, o)
    }})
})(jQuery);
(function (e, t) {
    var n = 0, r = Array.prototype.slice, i = e.cleanData;
    e.cleanData = function (t) {
        for (var n = 0, r; (r = t[n]) != null; n++)try {
            e(r).triggerHandler("remove")
        } catch (s) {
        }
        i(t)
    }, e.widget = function (t, n, r) {
        var i, s, o, u, a = t.split(".")[0];
        t = t.split(".")[1], i = a + "-" + t, r || (r = n, n = e.Widget), e.expr[":"][i.toLowerCase()] = function (t) {
            return!!e.data(t, i)
        }, e[a] = e[a] || {}, s = e[a][t], o = e[a][t] = function (e, t) {
            if (!this._createWidget)return new o(e, t);
            arguments.length && this._createWidget(e, t)
        }, e.extend(o, s, {version: r.version, _proto: e.extend({}, r), _childConstructors: []}), u = new n, u.options = e.widget.extend({}, u.options), e.each(r, function (t, i) {
            e.isFunction(i) && (r[t] = function () {
                var e = function () {
                    return n.prototype[t].apply(this, arguments)
                }, r = function (e) {
                    return n.prototype[t].apply(this, e)
                };
                return function () {
                    var t = this._super, n = this._superApply, s;
                    return this._super = e, this._superApply = r, s = i.apply(this, arguments), this._super = t, this._superApply = n, s
                }
            }())
        }), o.prototype = e.widget.extend(u, {widgetEventPrefix: s ? u.widgetEventPrefix : t}, r, {constructor: o, namespace: a, widgetName: t, widgetBaseClass: i, widgetFullName: i}), s ? (e.each(s._childConstructors, function (t, n) {
            var r = n.prototype;
            e.widget(r.namespace + "." + r.widgetName, o, n._proto)
        }), delete s._childConstructors) : n._childConstructors.push(o), e.widget.bridge(t, o)
    }, e.widget.extend = function (n) {
        var i = r.call(arguments, 1), s = 0, o = i.length, u, a;
        for (; s < o; s++)for (u in i[s])a = i[s][u], i[s].hasOwnProperty(u) && a !== t && (e.isPlainObject(a) ? n[u] = e.isPlainObject(n[u]) ? e.widget.extend({}, n[u], a) : e.widget.extend({}, a) : n[u] = a);
        return n
    }, e.widget.bridge = function (n, i) {
        var s = i.prototype.widgetFullName || n;
        e.fn[n] = function (o) {
            var u = typeof o == "string", a = r.call(arguments, 1), f = this;
            return o = !u && a.length ? e.widget.extend.apply(null, [o].concat(a)) : o, u ? this.each(function () {
                var r, i = e.data(this, s);
                if (!i)return e.error("cannot call methods on " + n + " prior to initialization; " + "attempted to call method '" + o + "'");
                if (!e.isFunction(i[o]) || o.charAt(0) === "_")return e.error("no such method '" + o + "' for " + n + " widget instance");
                r = i[o].apply(i, a);
                if (r !== i && r !== t)return f = r && r.jquery ? f.pushStack(r.get()) : r, !1
            }) : this.each(function () {
                var t = e.data(this, s);
                t ? t.option(o || {})._init() : e.data(this, s, new i(o, this))
            }), f
        }
    }, e.Widget = function () {
    }, e.Widget._childConstructors = [], e.Widget.prototype = {widgetName: "widget", widgetEventPrefix: "", defaultElement: "<div>", options: {disabled: !1, create: null}, _createWidget: function (t, r) {
        r = e(r || this.defaultElement || this)[0], this.element = e(r), this.uuid = n++, this.eventNamespace = "." + this.widgetName + this.uuid, this.options = e.widget.extend({}, this.options, this._getCreateOptions(), t), this.bindings = e(), this.hoverable = e(), this.focusable = e(), r !== this && (e.data(r, this.widgetName, this), e.data(r, this.widgetFullName, this), this._on(!0, this.element, {remove: function (e) {
            e.target === r && this.destroy()
        }}), this.document = e(r.style ? r.ownerDocument : r.document || r), this.window = e(this.document[0].defaultView || this.document[0].parentWindow)), this._create(), this._trigger("create", null, this._getCreateEventData()), this._init()
    }, _getCreateOptions                                                 : e.noop, _getCreateEventData: e.noop, _create: e.noop, _init: e.noop, destroy: function () {
        this._destroy(), this.element.unbind(this.eventNamespace).removeData(this.widgetName).removeData(this.widgetFullName).removeData(e.camelCase(this.widgetFullName)), this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName + "-disabled " + "ui-state-disabled"), this.bindings.unbind(this.eventNamespace), this.hoverable.removeClass("ui-state-hover"), this.focusable.removeClass("ui-state-focus")
    }, _destroy                                                          : e.noop, widget: function () {
        return this.element
    }, option                                                            : function (n, r) {
        var i = n, s, o, u;
        if (arguments.length === 0)return e.widget.extend({}, this.options);
        if (typeof n == "string") {
            i = {}, s = n.split("."), n = s.shift();
            if (s.length) {
                o = i[n] = e.widget.extend({}, this.options[n]);
                for (u = 0; u < s.length - 1; u++)o[s[u]] = o[s[u]] || {}, o = o[s[u]];
                n = s.pop();
                if (r === t)return o[n] === t ? null : o[n];
                o[n] = r
            } else {
                if (r === t)return this.options[n] === t ? null : this.options[n];
                i[n] = r
            }
        }
        return this._setOptions(i), this
    }, _setOptions                                                       : function (e) {
        var t;
        for (t in e)this._setOption(t, e[t]);
        return this
    }, _setOption                                                        : function (e, t) {
        return this.options[e] = t, e === "disabled" && (this.widget().toggleClass(this.widgetFullName + "-disabled ui-state-disabled", !!t).attr("aria-disabled", t), this.hoverable.removeClass("ui-state-hover"), this.focusable.removeClass("ui-state-focus")), this
    }, enable                                                            : function () {
        return this._setOption("disabled", !1)
    }, disable                                                           : function () {
        return this._setOption("disabled", !0)
    }, _on                                                               : function (t, n, r) {
        var i, s = this;
        typeof t != "boolean" && (r = n, n = t, t = !1), r ? (n = i = e(n), this.bindings = this.bindings.add(n)) : (r = n, n = this.element, i = this.widget()), e.each(r, function (r, o) {
            function u() {
                if (!t && (s.options.disabled === !0 || e(this).hasClass("ui-state-disabled")))return;
                return(typeof o == "string" ? s[o] : o).apply(s, arguments)
            }

            typeof o != "string" && (u.guid = o.guid = o.guid || u.guid || e.guid++);
            var a = r.match(/^(\w+)\s*(.*)$/), f = a[1] + s.eventNamespace, l = a[2];
            l ? i.delegate(l, f, u) : n.bind(f, u)
        })
    }, _off                                                              : function (e, t) {
        t = (t || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace, e.unbind(t).undelegate(t)
    }, _delay                                                            : function (e, t) {
        function n() {
            return(typeof e == "string" ? r[e] : e).apply(r, arguments)
        }

        var r = this;
        return setTimeout(n, t || 0)
    }, _hoverable                                                        : function (t) {
        this.hoverable = this.hoverable.add(t), this._on(t, {mouseenter: function (t) {
            e(t.currentTarget).addClass("ui-state-hover")
        }, mouseleave                                                  : function (t) {
            e(t.currentTarget).removeClass("ui-state-hover")
        }})
    }, _focusable                                                        : function (t) {
        this.focusable = this.focusable.add(t), this._on(t, {focusin: function (t) {
            e(t.currentTarget).addClass("ui-state-focus")
        }, focusout                                                 : function (t) {
            e(t.currentTarget).removeClass("ui-state-focus")
        }})
    }, _trigger                                                          : function (t, n, r) {
        var i, s, o = this.options[t];
        r = r || {}, n = e.Event(n), n.type = (t === this.widgetEventPrefix ? t : this.widgetEventPrefix + t).toLowerCase(), n.target = this.element[0], s = n.originalEvent;
        if (s)for (i in s)i in n || (n[i] = s[i]);
        return this.element.trigger(n, r), !(e.isFunction(o) && o.apply(this.element[0], [n].concat(r)) === !1 || n.isDefaultPrevented())
    }}, e.each({show: "fadeIn", hide: "fadeOut"}, function (t, n) {
        e.Widget.prototype["_" + t] = function (r, i, s) {
            typeof i == "string" && (i = {effect: i});
            var o, u = i ? i === !0 || typeof i == "number" ? n : i.effect || n : t;
            i = i || {}, typeof i == "number" && (i = {duration: i}), o = !e.isEmptyObject(i), i.complete = s, i.delay && r.delay(i.delay), o && e.effects && (e.effects.effect[u] || e.uiBackCompat !== !1 && e.effects[u]) ? r[t](i) : u !== t && r[u] ? r[u](i.duration, i.easing, s) : r.queue(function (n) {
                e(this)[t](), s && s.call(r[0]), n()
            })
        }
    }), e.uiBackCompat !== !1 && (e.Widget.prototype._getCreateOptions = function () {
        return e.metadata && e.metadata.get(this.element[0])[this.widgetName]
    })
})(jQuery);
(function (e, t) {
    var n = !1;
    e(document).mouseup(function (e) {
        n = !1
    }), e.widget("ui.mouse", {version: "1.9.2", options: {cancel: "input,textarea,button,select,option", distance: 1, delay: 0}, _mouseInit: function () {
        var t = this;
        this.element.bind("mousedown." + this.widgetName, function (e) {
            return t._mouseDown(e)
        }).bind("click." + this.widgetName, function (n) {
            if (!0 === e.data(n.target, t.widgetName + ".preventClickEvent"))return e.removeData(n.target, t.widgetName + ".preventClickEvent"), n.stopImmediatePropagation(), !1
        }), this.started = !1
    }, _mouseDestroy                 : function () {
        this.element.unbind("." + this.widgetName), this._mouseMoveDelegate && e(document).unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate)
    }, _mouseDown                    : function (t) {
        if (n)return;
        this._mouseStarted && this._mouseUp(t), this._mouseDownEvent = t;
        var r = this, i = t.which === 1, s = typeof this.options.cancel == "string" && t.target.nodeName ? e(t.target).closest(this.options.cancel).length : !1;
        if (!i || s || !this._mouseCapture(t))return!0;
        this.mouseDelayMet = !this.options.delay, this.mouseDelayMet || (this._mouseDelayTimer = setTimeout(function () {
            r.mouseDelayMet = !0
        }, this.options.delay));
        if (this._mouseDistanceMet(t) && this._mouseDelayMet(t)) {
            this._mouseStarted = this._mouseStart(t) !== !1;
            if (!this._mouseStarted)return t.preventDefault(), !0
        }
        return!0 === e.data(t.target, this.widgetName + ".preventClickEvent") && e.removeData(t.target, this.widgetName + ".preventClickEvent"), this._mouseMoveDelegate = function (e) {
            return r._mouseMove(e)
        }, this._mouseUpDelegate = function (e) {
            return r._mouseUp(e)
        }, e(document).bind("mousemove." + this.widgetName, this._mouseMoveDelegate).bind("mouseup." + this.widgetName, this._mouseUpDelegate), t.preventDefault(), n = !0, !0
    }, _mouseMove                    : function (t) {
        return!e.ui.ie || document.documentMode >= 9 || !!t.button ? this._mouseStarted ? (this._mouseDrag(t), t.preventDefault()) : (this._mouseDistanceMet(t) && this._mouseDelayMet(t) && (this._mouseStarted = this._mouseStart(this._mouseDownEvent, t) !== !1, this._mouseStarted ? this._mouseDrag(t) : this._mouseUp(t)), !this._mouseStarted) : this._mouseUp(t)
    }, _mouseUp                      : function (t) {
        return e(document).unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate), this._mouseStarted && (this._mouseStarted = !1, t.target === this._mouseDownEvent.target && e.data(t.target, this.widgetName + ".preventClickEvent", !0), this._mouseStop(t)), !1
    }, _mouseDistanceMet             : function (e) {
        return Math.max(Math.abs(this._mouseDownEvent.pageX - e.pageX), Math.abs(this._mouseDownEvent.pageY - e.pageY)) >= this.options.distance
    }, _mouseDelayMet                : function (e) {
        return this.mouseDelayMet
    }, _mouseStart                   : function (e) {
    }, _mouseDrag                    : function (e) {
    }, _mouseStop                    : function (e) {
    }, _mouseCapture                 : function (e) {
        return!0
    }})
})(jQuery);
(function (e, t) {
    e.widget("ui.draggable", e.ui.mouse, {version: "1.9.2", widgetEventPrefix: "drag", options: {addClasses: !0, appendTo: "parent", axis: !1, connectToSortable: !1, containment: !1, cursor: "auto", cursorAt: !1, grid: !1, handle: !1, helper: "original", iframeFix: !1, opacity: !1, refreshPositions: !1, revert: !1, revertDuration: 500, scope: "default", scroll: !0, scrollSensitivity: 20, scrollSpeed: 20, snap: !1, snapMode: "both", snapTolerance: 20, stack: !1, zIndex: !1}, _create: function () {
        this.options.helper == "original" && !/^(?:r|a|f)/.test(this.element.css("position")) && (this.element[0].style.position = "relative"), this.options.addClasses && this.element.addClass("ui-draggable"), this.options.disabled && this.element.addClass("ui-draggable-disabled"), this._mouseInit()
    }, _destroy                                  : function () {
        this.element.removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled"), this._mouseDestroy()
    }, _mouseCapture                             : function (t) {
        var n = this.options;
        return this.helper || n.disabled || e(t.target).is(".ui-resizable-handle") ? !1 : (this.handle = this._getHandle(t), this.handle ? (e(n.iframeFix === !0 ? "iframe" : n.iframeFix).each(function () {
            e('<div class="ui-draggable-iframeFix" style="background: #fff;"></div>').css({width: this.offsetWidth + "px", height: this.offsetHeight + "px", position: "absolute", opacity: "0.001", zIndex: 1e3}).css(e(this).offset()).appendTo("body")
        }), !0) : !1)
    }, _mouseStart                               : function (t) {
        var n = this.options;
        return this.helper = this._createHelper(t), this.helper.addClass("ui-draggable-dragging"), this._cacheHelperProportions(), e.ui.ddmanager && (e.ui.ddmanager.current = this), this._cacheMargins(), this.cssPosition = this.helper.css("position"), this.scrollParent = this.helper.scrollParent(), this.offset = this.positionAbs = this.element.offset(), this.offset = {top: this.offset.top - this.margins.top, left: this.offset.left - this.margins.left}, e.extend(this.offset, {click: {left: t.pageX - this.offset.left, top: t.pageY - this.offset.top}, parent: this._getParentOffset(), relative: this._getRelativeOffset()}), this.originalPosition = this.position = this._generatePosition(t), this.originalPageX = t.pageX, this.originalPageY = t.pageY, n.cursorAt && this._adjustOffsetFromHelper(n.cursorAt), n.containment && this._setContainment(), this._trigger("start", t) === !1 ? (this._clear(), !1) : (this._cacheHelperProportions(), e.ui.ddmanager && !n.dropBehaviour && e.ui.ddmanager.prepareOffsets(this, t), this._mouseDrag(t, !0), e.ui.ddmanager && e.ui.ddmanager.dragStart(this, t), !0)
    }, _mouseDrag                                : function (t, n) {
        this.position = this._generatePosition(t), this.positionAbs = this._convertPositionTo("absolute");
        if (!n) {
            var r = this._uiHash();
            if (this._trigger("drag", t, r) === !1)return this._mouseUp({}), !1;
            this.position = r.position
        }
        if (!this.options.axis || this.options.axis != "y")this.helper[0].style.left = this.position.left + "px";
        if (!this.options.axis || this.options.axis != "x")this.helper[0].style.top = this.position.top + "px";
        return e.ui.ddmanager && e.ui.ddmanager.drag(this, t), !1
    }, _mouseStop                                : function (t) {
        var n = !1;
        e.ui.ddmanager && !this.options.dropBehaviour && (n = e.ui.ddmanager.drop(this, t)), this.dropped && (n = this.dropped, this.dropped = !1);
        var r = this.element[0], i = !1;
        while (r && (r = r.parentNode))r == document && (i = !0);
        if (!i && this.options.helper === "original")return!1;
        if (this.options.revert == "invalid" && !n || this.options.revert == "valid" && n || this.options.revert === !0 || e.isFunction(this.options.revert) && this.options.revert.call(this.element, n)) {
            var s = this;
            e(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function () {
                s._trigger("stop", t) !== !1 && s._clear()
            })
        } else this._trigger("stop", t) !== !1 && this._clear();
        return!1
    }, _mouseUp                                  : function (t) {
        return e("div.ui-draggable-iframeFix").each(function () {
            this.parentNode.removeChild(this)
        }), e.ui.ddmanager && e.ui.ddmanager.dragStop(this, t), e.ui.mouse.prototype._mouseUp.call(this, t)
    }, cancel                                    : function () {
        return this.helper.is(".ui-draggable-dragging") ? this._mouseUp({}) : this._clear(), this
    }, _getHandle                                : function (t) {
        var n = !this.options.handle || !e(this.options.handle, this.element).length ? !0 : !1;
        return e(this.options.handle, this.element).find("*").andSelf().each(function () {
            this == t.target && (n = !0)
        }), n
    }, _createHelper                             : function (t) {
        var n = this.options, r = e.isFunction(n.helper) ? e(n.helper.apply(this.element[0], [t])) : n.helper == "clone" ? this.element.clone().removeAttr("id") : this.element;
        return r.parents("body").length || r.appendTo(n.appendTo == "parent" ? this.element[0].parentNode : n.appendTo), r[0] != this.element[0] && !/(fixed|absolute)/.test(r.css("position")) && r.css("position", "absolute"), r
    }, _adjustOffsetFromHelper                   : function (t) {
        typeof t == "string" && (t = t.split(" ")), e.isArray(t) && (t = {left: +t[0], top: +t[1] || 0}), "left"in t && (this.offset.click.left = t.left + this.margins.left), "right"in t && (this.offset.click.left = this.helperProportions.width - t.right + this.margins.left), "top"in t && (this.offset.click.top = t.top + this.margins.top), "bottom"in t && (this.offset.click.top = this.helperProportions.height - t.bottom + this.margins.top)
    }, _getParentOffset                          : function () {
        this.offsetParent = this.helper.offsetParent();
        var t = this.offsetParent.offset();
        this.cssPosition == "absolute" && this.scrollParent[0] != document && e.contains(this.scrollParent[0], this.offsetParent[0]) && (t.left += this.scrollParent.scrollLeft(), t.top += this.scrollParent.scrollTop());
        if (this.offsetParent[0] == document.body || this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() == "html" && e.ui.ie)t = {top: 0, left: 0};
        return{top: t.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0), left: t.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)}
    }, _getRelativeOffset                        : function () {
        if (this.cssPosition == "relative") {
            var e = this.element.position();
            return{top: e.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(), left: e.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()}
        }
        return{top: 0, left: 0}
    }, _cacheMargins                             : function () {
        this.margins = {left: parseInt(this.element.css("marginLeft"), 10) || 0, top: parseInt(this.element.css("marginTop"), 10) || 0, right: parseInt(this.element.css("marginRight"), 10) || 0, bottom: parseInt(this.element.css("marginBottom"), 10) || 0}
    }, _cacheHelperProportions                   : function () {
        this.helperProportions = {width: this.helper.outerWidth(), height: this.helper.outerHeight()}
    }, _setContainment                           : function () {
        var t = this.options;
        t.containment == "parent" && (t.containment = this.helper[0].parentNode);
        if (t.containment == "document" || t.containment == "window")this.containment = [t.containment == "document" ? 0 : e(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left, t.containment == "document" ? 0 : e(window).scrollTop() - this.offset.relative.top - this.offset.parent.top, (t.containment == "document" ? 0 : e(window).scrollLeft()) + e(t.containment == "document" ? document : window).width() - this.helperProportions.width - this.margins.left, (t.containment == "document" ? 0 : e(window).scrollTop()) + (e(t.containment == "document" ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];
        if (!/^(document|window|parent)$/.test(t.containment) && t.containment.constructor != Array) {
            var n = e(t.containment), r = n[0];
            if (!r)return;
            var i = n.offset(), s = e(r).css("overflow") != "hidden";
            this.containment = [(parseInt(e(r).css("borderLeftWidth"), 10) || 0) + (parseInt(e(r).css("paddingLeft"), 10) || 0), (parseInt(e(r).css("borderTopWidth"), 10) || 0) + (parseInt(e(r).css("paddingTop"), 10) || 0), (s ? Math.max(r.scrollWidth, r.offsetWidth) : r.offsetWidth) - (parseInt(e(r).css("borderLeftWidth"), 10) || 0) - (parseInt(e(r).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, (s ? Math.max(r.scrollHeight, r.offsetHeight) : r.offsetHeight) - (parseInt(e(r).css("borderTopWidth"), 10) || 0) - (parseInt(e(r).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom], this.relative_container = n
        } else t.containment.constructor == Array && (this.containment = t.containment)
    }, _convertPositionTo                        : function (t, n) {
        n || (n = this.position);
        var r = t == "absolute" ? 1 : -1, i = this.options, s = this.cssPosition != "absolute" || this.scrollParent[0] != document && !!e.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent : this.offsetParent, o = /(html|body)/i.test(s[0].tagName);
        return{top: n.top + this.offset.relative.top * r + this.offset.parent.top * r - (this.cssPosition == "fixed" ? -this.scrollParent.scrollTop() : o ? 0 : s.scrollTop()) * r, left: n.left + this.offset.relative.left * r + this.offset.parent.left * r - (this.cssPosition == "fixed" ? -this.scrollParent.scrollLeft() : o ? 0 : s.scrollLeft()) * r}
    }, _generatePosition                         : function (t) {
        var n = this.options, r = this.cssPosition != "absolute" || this.scrollParent[0] != document && !!e.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent : this.offsetParent, i = /(html|body)/i.test(r[0].tagName), s = t.pageX, o = t.pageY;
        if (this.originalPosition) {
            var u;
            if (this.containment) {
                if (this.relative_container) {
                    var a = this.relative_container.offset();
                    u = [this.containment[0] + a.left, this.containment[1] + a.top, this.containment[2] + a.left, this.containment[3] + a.top]
                } else u = this.containment;
                t.pageX - this.offset.click.left < u[0] && (s = u[0] + this.offset.click.left), t.pageY - this.offset.click.top < u[1] && (o = u[1] + this.offset.click.top), t.pageX - this.offset.click.left > u[2] && (s = u[2] + this.offset.click.left), t.pageY - this.offset.click.top > u[3] && (o = u[3] + this.offset.click.top)
            }
            if (n.grid) {
                var f = n.grid[1] ? this.originalPageY + Math.round((o - this.originalPageY) / n.grid[1]) * n.grid[1] : this.originalPageY;
                o = u ? f - this.offset.click.top < u[1] || f - this.offset.click.top > u[3] ? f - this.offset.click.top < u[1] ? f + n.grid[1] : f - n.grid[1] : f : f;
                var l = n.grid[0] ? this.originalPageX + Math.round((s - this.originalPageX) / n.grid[0]) * n.grid[0] : this.originalPageX;
                s = u ? l - this.offset.click.left < u[0] || l - this.offset.click.left > u[2] ? l - this.offset.click.left < u[0] ? l + n.grid[0] : l - n.grid[0] : l : l
            }
        }
        return{top: o - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + (this.cssPosition == "fixed" ? -this.scrollParent.scrollTop() : i ? 0 : r.scrollTop()), left: s - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + (this.cssPosition == "fixed" ? -this.scrollParent.scrollLeft() : i ? 0 : r.scrollLeft())}
    }, _clear                                    : function () {
        this.helper.removeClass("ui-draggable-dragging"), this.helper[0] != this.element[0] && !this.cancelHelperRemoval && this.helper.remove(), this.helper = null, this.cancelHelperRemoval = !1
    }, _trigger                                  : function (t, n, r) {
        return r = r || this._uiHash(), e.ui.plugin.call(this, t, [n, r]), t == "drag" && (this.positionAbs = this._convertPositionTo("absolute")), e.Widget.prototype._trigger.call(this, t, n, r)
    }, plugins                                   : {}, _uiHash: function (e) {
        return{helper: this.helper, position: this.position, originalPosition: this.originalPosition, offset: this.positionAbs}
    }}), e.ui.plugin.add("draggable", "connectToSortable", {start: function (t, n) {
        var r = e(this).data("draggable"), i = r.options, s = e.extend({}, n, {item: r.element});
        r.sortables = [], e(i.connectToSortable).each(function () {
            var n = e.data(this, "sortable");
            n && !n.options.disabled && (r.sortables.push({instance: n, shouldRevert: n.options.revert}), n.refreshPositions(), n._trigger("activate", t, s))
        })
    }, stop                                                      : function (t, n) {
        var r = e(this).data("draggable"), i = e.extend({}, n, {item: r.element});
        e.each(r.sortables, function () {
            this.instance.isOver ? (this.instance.isOver = 0, r.cancelHelperRemoval = !0, this.instance.cancelHelperRemoval = !1, this.shouldRevert && (this.instance.options.revert = !0), this.instance._mouseStop(t), this.instance.options.helper = this.instance.options._helper, r.options.helper == "original" && this.instance.currentItem.css({top: "auto", left: "auto"})) : (this.instance.cancelHelperRemoval = !1, this.instance._trigger("deactivate", t, i))
        })
    }, drag                                                      : function (t, n) {
        var r = e(this).data("draggable"), i = this, s = function (t) {
            var n = this.offset.click.top, r = this.offset.click.left, i = this.positionAbs.top, s = this.positionAbs.left, o = t.height, u = t.width, a = t.top, f = t.left;
            return e.ui.isOver(i + n, s + r, a, f, o, u)
        };
        e.each(r.sortables, function (s) {
            var o = !1, u = this;
            this.instance.positionAbs = r.positionAbs, this.instance.helperProportions = r.helperProportions, this.instance.offset.click = r.offset.click, this.instance._intersectsWith(this.instance.containerCache) && (o = !0, e.each(r.sortables, function () {
                return this.instance.positionAbs = r.positionAbs, this.instance.helperProportions = r.helperProportions, this.instance.offset.click = r.offset.click, this != u && this.instance._intersectsWith(this.instance.containerCache) && e.ui.contains(u.instance.element[0], this.instance.element[0]) && (o = !1), o
            })), o ? (this.instance.isOver || (this.instance.isOver = 1, this.instance.currentItem = e(i).clone().removeAttr("id").appendTo(this.instance.element).data("sortable-item", !0), this.instance.options._helper = this.instance.options.helper, this.instance.options.helper = function () {
                return n.helper[0]
            }, t.target = this.instance.currentItem[0], this.instance._mouseCapture(t, !0), this.instance._mouseStart(t, !0, !0), this.instance.offset.click.top = r.offset.click.top, this.instance.offset.click.left = r.offset.click.left, this.instance.offset.parent.left -= r.offset.parent.left - this.instance.offset.parent.left, this.instance.offset.parent.top -= r.offset.parent.top - this.instance.offset.parent.top, r._trigger("toSortable", t), r.dropped = this.instance.element, r.currentItem = r.element, this.instance.fromOutside = r), this.instance.currentItem && this.instance._mouseDrag(t)) : this.instance.isOver && (this.instance.isOver = 0, this.instance.cancelHelperRemoval = !0, this.instance.options.revert = !1, this.instance._trigger("out", t, this.instance._uiHash(this.instance)), this.instance._mouseStop(t, !0), this.instance.options.helper = this.instance.options._helper, this.instance.currentItem.remove(), this.instance.placeholder && this.instance.placeholder.remove(), r._trigger("fromSortable", t), r.dropped = !1)
        })
    }}), e.ui.plugin.add("draggable", "cursor", {start: function (t, n) {
        var r = e("body"), i = e(this).data("draggable").options;
        r.css("cursor") && (i._cursor = r.css("cursor")), r.css("cursor", i.cursor)
    }, stop                                           : function (t, n) {
        var r = e(this).data("draggable").options;
        r._cursor && e("body").css("cursor", r._cursor)
    }}), e.ui.plugin.add("draggable", "opacity", {start: function (t, n) {
        var r = e(n.helper), i = e(this).data("draggable").options;
        r.css("opacity") && (i._opacity = r.css("opacity")), r.css("opacity", i.opacity)
    }, stop                                            : function (t, n) {
        var r = e(this).data("draggable").options;
        r._opacity && e(n.helper).css("opacity", r._opacity)
    }}), e.ui.plugin.add("draggable", "scroll", {start: function (t, n) {
        var r = e(this).data("draggable");
        r.scrollParent[0] != document && r.scrollParent[0].tagName != "HTML" && (r.overflowOffset = r.scrollParent.offset())
    }, drag                                           : function (t, n) {
        var r = e(this).data("draggable"), i = r.options, s = !1;
        if (r.scrollParent[0] != document && r.scrollParent[0].tagName != "HTML") {
            if (!i.axis || i.axis != "x")r.overflowOffset.top + r.scrollParent[0].offsetHeight - t.pageY < i.scrollSensitivity ? r.scrollParent[0].scrollTop = s = r.scrollParent[0].scrollTop + i.scrollSpeed : t.pageY - r.overflowOffset.top < i.scrollSensitivity && (r.scrollParent[0].scrollTop = s = r.scrollParent[0].scrollTop - i.scrollSpeed);
            if (!i.axis || i.axis != "y")r.overflowOffset.left + r.scrollParent[0].offsetWidth - t.pageX < i.scrollSensitivity ? r.scrollParent[0].scrollLeft = s = r.scrollParent[0].scrollLeft + i.scrollSpeed : t.pageX - r.overflowOffset.left < i.scrollSensitivity && (r.scrollParent[0].scrollLeft = s = r.scrollParent[0].scrollLeft - i.scrollSpeed)
        } else {
            if (!i.axis || i.axis != "x")t.pageY - e(document).scrollTop() < i.scrollSensitivity ? s = e(document).scrollTop(e(document).scrollTop() - i.scrollSpeed) : e(window).height() - (t.pageY - e(document).scrollTop()) < i.scrollSensitivity && (s = e(document).scrollTop(e(document).scrollTop() + i.scrollSpeed));
            if (!i.axis || i.axis != "y")t.pageX - e(document).scrollLeft() < i.scrollSensitivity ? s = e(document).scrollLeft(e(document).scrollLeft() - i.scrollSpeed) : e(window).width() - (t.pageX - e(document).scrollLeft()) < i.scrollSensitivity && (s = e(document).scrollLeft(e(document).scrollLeft() + i.scrollSpeed))
        }
        s !== !1 && e.ui.ddmanager && !i.dropBehaviour && e.ui.ddmanager.prepareOffsets(r, t)
    }}), e.ui.plugin.add("draggable", "snap", {start: function (t, n) {
        var r = e(this).data("draggable"), i = r.options;
        r.snapElements = [], e(i.snap.constructor != String ? i.snap.items || ":data(draggable)" : i.snap).each(function () {
            var t = e(this), n = t.offset();
            this != r.element[0] && r.snapElements.push({item: this, width: t.outerWidth(), height: t.outerHeight(), top: n.top, left: n.left})
        })
    }, drag                                         : function (t, n) {
        var r = e(this).data("draggable"), i = r.options, s = i.snapTolerance, o = n.offset.left, u = o + r.helperProportions.width, a = n.offset.top, f = a + r.helperProportions.height;
        for (var l = r.snapElements.length - 1; l >= 0; l--) {
            var c = r.snapElements[l].left, h = c + r.snapElements[l].width, p = r.snapElements[l].top, d = p + r.snapElements[l].height;
            if (!(c - s < o && o < h + s && p - s < a && a < d + s || c - s < o && o < h + s && p - s < f && f < d + s || c - s < u && u < h + s && p - s < a && a < d + s || c - s < u && u < h + s && p - s < f && f < d + s)) {
                r.snapElements[l].snapping && r.options.snap.release && r.options.snap.release.call(r.element, t, e.extend(r._uiHash(), {snapItem: r.snapElements[l].item})), r.snapElements[l].snapping = !1;
                continue
            }
            if (i.snapMode != "inner") {
                var v = Math.abs(p - f) <= s, m = Math.abs(d - a) <= s, g = Math.abs(c - u) <= s, y = Math.abs(h - o) <= s;
                v && (n.position.top = r._convertPositionTo("relative", {top: p - r.helperProportions.height, left: 0}).top - r.margins.top), m && (n.position.top = r._convertPositionTo("relative", {top: d, left: 0}).top - r.margins.top), g && (n.position.left = r._convertPositionTo("relative", {top: 0, left: c - r.helperProportions.width}).left - r.margins.left), y && (n.position.left = r._convertPositionTo("relative", {top: 0, left: h}).left - r.margins.left)
            }
            var b = v || m || g || y;
            if (i.snapMode != "outer") {
                var v = Math.abs(p - a) <= s, m = Math.abs(d - f) <= s, g = Math.abs(c - o) <= s, y = Math.abs(h - u) <= s;
                v && (n.position.top = r._convertPositionTo("relative", {top: p, left: 0}).top - r.margins.top), m && (n.position.top = r._convertPositionTo("relative", {top: d - r.helperProportions.height, left: 0}).top - r.margins.top), g && (n.position.left = r._convertPositionTo("relative", {top: 0, left: c}).left - r.margins.left), y && (n.position.left = r._convertPositionTo("relative", {top: 0, left: h - r.helperProportions.width}).left - r.margins.left)
            }
            !r.snapElements[l].snapping && (v || m || g || y || b) && r.options.snap.snap && r.options.snap.snap.call(r.element, t, e.extend(r._uiHash(), {snapItem: r.snapElements[l].item})), r.snapElements[l].snapping = v || m || g || y || b
        }
    }}), e.ui.plugin.add("draggable", "stack", {start: function (t, n) {
        var r = e(this).data("draggable").options, i = e.makeArray(e(r.stack)).sort(function (t, n) {
            return(parseInt(e(t).css("zIndex"), 10) || 0) - (parseInt(e(n).css("zIndex"), 10) || 0)
        });
        if (!i.length)return;
        var s = parseInt(i[0].style.zIndex) || 0;
        e(i).each(function (e) {
            this.style.zIndex = s + e
        }), this[0].style.zIndex = s + i.length
    }}), e.ui.plugin.add("draggable", "zIndex", {start: function (t, n) {
        var r = e(n.helper), i = e(this).data("draggable").options;
        r.css("zIndex") && (i._zIndex = r.css("zIndex")), r.css("zIndex", i.zIndex)
    }, stop                                           : function (t, n) {
        var r = e(this).data("draggable").options;
        r._zIndex && e(n.helper).css("zIndex", r._zIndex)
    }})
})(jQuery);
(function (e, t) {
    e.widget("ui.droppable", {version: "1.9.2", widgetEventPrefix: "drop", options: {accept: "*", activeClass: !1, addClasses: !0, greedy: !1, hoverClass: !1, scope: "default", tolerance: "intersect"}, _create: function () {
        var t = this.options, n = t.accept;
        this.isover = 0, this.isout = 1, this.accept = e.isFunction(n) ? n : function (e) {
            return e.is(n)
        }, this.proportions = {width: this.element[0].offsetWidth, height: this.element[0].offsetHeight}, e.ui.ddmanager.droppables[t.scope] = e.ui.ddmanager.droppables[t.scope] || [], e.ui.ddmanager.droppables[t.scope].push(this), t.addClasses && this.element.addClass("ui-droppable")
    }, _destroy                      : function () {
        var t = e.ui.ddmanager.droppables[this.options.scope];
        for (var n = 0; n < t.length; n++)t[n] == this && t.splice(n, 1);
        this.element.removeClass("ui-droppable ui-droppable-disabled")
    }, _setOption                    : function (t, n) {
        t == "accept" && (this.accept = e.isFunction(n) ? n : function (e) {
            return e.is(n)
        }), e.Widget.prototype._setOption.apply(this, arguments)
    }, _activate                     : function (t) {
        var n = e.ui.ddmanager.current;
        this.options.activeClass && this.element.addClass(this.options.activeClass), n && this._trigger("activate", t, this.ui(n))
    }, _deactivate                   : function (t) {
        var n = e.ui.ddmanager.current;
        this.options.activeClass && this.element.removeClass(this.options.activeClass), n && this._trigger("deactivate", t, this.ui(n))
    }, _over                         : function (t) {
        var n = e.ui.ddmanager.current;
        if (!n || (n.currentItem || n.element)[0] == this.element[0])return;
        this.accept.call(this.element[0], n.currentItem || n.element) && (this.options.hoverClass && this.element.addClass(this.options.hoverClass), this._trigger("over", t, this.ui(n)))
    }, _out                          : function (t) {
        var n = e.ui.ddmanager.current;
        if (!n || (n.currentItem || n.element)[0] == this.element[0])return;
        this.accept.call(this.element[0], n.currentItem || n.element) && (this.options.hoverClass && this.element.removeClass(this.options.hoverClass), this._trigger("out", t, this.ui(n)))
    }, _drop                         : function (t, n) {
        var r = n || e.ui.ddmanager.current;
        if (!r || (r.currentItem || r.element)[0] == this.element[0])return!1;
        var i = !1;
        return this.element.find(":data(droppable)").not(".ui-draggable-dragging").each(function () {
            var t = e.data(this, "droppable");
            if (t.options.greedy && !t.options.disabled && t.options.scope == r.options.scope && t.accept.call(t.element[0], r.currentItem || r.element) && e.ui.intersect(r, e.extend(t, {offset: t.element.offset()}), t.options.tolerance))return i = !0, !1
        }), i ? !1 : this.accept.call(this.element[0], r.currentItem || r.element) ? (this.options.activeClass && this.element.removeClass(this.options.activeClass), this.options.hoverClass && this.element.removeClass(this.options.hoverClass), this._trigger("drop", t, this.ui(r)), this.element) : !1
    }, ui                            : function (e) {
        return{draggable: e.currentItem || e.element, helper: e.helper, position: e.position, offset: e.positionAbs}
    }}), e.ui.intersect = function (t, n, r) {
        if (!n.offset)return!1;
        var i = (t.positionAbs || t.position.absolute).left, s = i + t.helperProportions.width, o = (t.positionAbs || t.position.absolute).top, u = o + t.helperProportions.height, a = n.offset.left, f = a + n.proportions.width, l = n.offset.top, c = l + n.proportions.height;
        switch (r) {
            case"fit":
                return a <= i && s <= f && l <= o && u <= c;
            case"intersect":
                return a < i + t.helperProportions.width / 2 && s - t.helperProportions.width / 2 < f && l < o + t.helperProportions.height / 2 && u - t.helperProportions.height / 2 < c;
            case"pointer":
                var h = (t.positionAbs || t.position.absolute).left + (t.clickOffset || t.offset.click).left, p = (t.positionAbs || t.position.absolute).top + (t.clickOffset || t.offset.click).top, d = e.ui.isOver(p, h, l, a, n.proportions.height, n.proportions.width);
                return d;
            case"touch":
                return(o >= l && o <= c || u >= l && u <= c || o < l && u > c) && (i >= a && i <= f || s >= a && s <= f || i < a && s > f);
            default:
                return!1
        }
    }, e.ui.ddmanager = {current: null, droppables: {"default": []}, prepareOffsets: function (t, n) {
        var r = e.ui.ddmanager.droppables[t.options.scope] || [], i = n ? n.type : null, s = (t.currentItem || t.element).find(":data(droppable)").andSelf();
        e:for (var o = 0; o < r.length; o++) {
            if (r[o].options.disabled || t && !r[o].accept.call(r[o].element[0], t.currentItem || t.element))continue;
            for (var u = 0; u < s.length; u++)if (s[u] == r[o].element[0]) {
                r[o].proportions.height = 0;
                continue e
            }
            r[o].visible = r[o].element.css("display") != "none";
            if (!r[o].visible)continue;
            i == "mousedown" && r[o]._activate.call(r[o], n), r[o].offset = r[o].element.offset(), r[o].proportions = {width: r[o].element[0].offsetWidth, height: r[o].element[0].offsetHeight}
        }
    }, drop                     : function (t, n) {
        var r = !1;
        return e.each(e.ui.ddmanager.droppables[t.options.scope] || [], function () {
            if (!this.options)return;
            !this.options.disabled && this.visible && e.ui.intersect(t, this, this.options.tolerance) && (r = this._drop.call(this, n) || r), !this.options.disabled && this.visible && this.accept.call(this.element[0], t.currentItem || t.element) && (this.isout = 1, this.isover = 0, this._deactivate.call(this, n))
        }), r
    }, dragStart                : function (t, n) {
        t.element.parentsUntil("body").bind("scroll.droppable", function () {
            t.options.refreshPositions || e.ui.ddmanager.prepareOffsets(t, n)
        })
    }, drag                     : function (t, n) {
        t.options.refreshPositions && e.ui.ddmanager.prepareOffsets(t, n), e.each(e.ui.ddmanager.droppables[t.options.scope] || [], function () {
            if (this.options.disabled || this.greedyChild || !this.visible)return;
            var r = e.ui.intersect(t, this, this.options.tolerance), i = !r && this.isover == 1 ? "isout" : r && this.isover == 0 ? "isover" : null;
            if (!i)return;
            var s;
            if (this.options.greedy) {
                var o = this.options.scope, u = this.element.parents(":data(droppable)").filter(function () {
                    return e.data(this, "droppable").options.scope === o
                });
                u.length && (s = e.data(u[0], "droppable"), s.greedyChild = i == "isover" ? 1 : 0)
            }
            s && i == "isover" && (s.isover = 0, s.isout = 1, s._out.call(s, n)), this[i] = 1, this[i == "isout" ? "isover" : "isout"] = 0, this[i == "isover" ? "_over" : "_out"].call(this, n), s && i == "isout" && (s.isout = 0, s.isover = 1, s._over.call(s, n))
        })
    }, dragStop                 : function (t, n) {
        t.element.parentsUntil("body").unbind("scroll.droppable"), t.options.refreshPositions || e.ui.ddmanager.prepareOffsets(t, n)
    }}
})(jQuery);
/* ===========================================================
 * bootstrap-ellipsistip.js v2.3.2
 * http://getbootstrap.com/2.3.2/javascript.html#ellipsistips
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ===========================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */


!function ($) {

    "use strict"; // jshint ;_;


    /* TOOLTIP PUBLIC CLASS DEFINITION
     * =============================== */

    var EllipsisTip = function (element, options) {
        this.init('ellipsistip', element, options)
    }

    EllipsisTip.prototype = {

        constructor      : EllipsisTip, init: function (type, element, options) {
            var eventIn
                , eventOut
                , triggers
                , trigger
                , i

            this.type = type
            this.$element = $(element)
            this.options = this.getOptions(options)
            this.enabled = true

            triggers = this.options.trigger.split(' ')

            for (i = triggers.length; i--;) {
                trigger = triggers[i]
                if (trigger == 'click') {
                    this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
                } else if (trigger != 'manual') {
                    eventIn = trigger == 'hover' ? 'mouseenter' : 'focus'
                    eventOut = trigger == 'hover' ? 'mouseleave' : 'blur'
                    this.$element.on(eventIn + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
                    this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
                }
            }
            this.ellips(this.$element);
            this.options.selector ?
                (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
                this.fixTitle();

        }, getOptions    : function (options) {
            options = $.extend({}, $.fn[this.type].defaults, this.$element.data(), options)

            if (options.delay && typeof options.delay == 'number') {
                options.delay = {
                    show: options.delay, hide: options.delay
                }
            }

            return options
        }, enter         : function (e) {
            var defaults = $.fn[this.type].defaults
                , options = {}
                , self

            this._options && $.each(this._options, function (key, value) {
                if (defaults[key] != value) options[key] = value
            }, this)

            self = $(e.currentTarget)[this.type](options).data(this.type)

            if (!self.options.delay || !self.options.delay.show) return self.show()

            clearTimeout(this.timeout)
            self.hoverState = 'in'
            this.timeout = setTimeout(function () {
                if (self.hoverState == 'in') self.show()
            }, self.options.delay.show)
        }, leave         : function (e) {
            var self = $(e.currentTarget)[this.type](this._options).data(this.type)

            if (this.timeout) clearTimeout(this.timeout)
            if (!self.options.delay || !self.options.delay.hide) return self.hide()

            self.hoverState = 'out'
            this.timeout = setTimeout(function () {
                if (self.hoverState == 'out') self.hide()
            }, self.options.delay.hide)
        }, show          : function () {
            var $tip
                , pos
                , actualWidth
                , actualHeight
                , placement
                , tp
                , e = $.Event('show')

            if (this.hasContent() && this.enabled) {
                this.$element.trigger(e)
                if (e.isDefaultPrevented()) return
                $tip = this.tip()
                this.setContent()

                if (this.options.animation) {
                    $tip.addClass('fade')
                }

                placement = typeof this.options.placement == 'function' ?
                    this.options.placement.call(this, $tip[0], this.$element[0]) :
                    this.options.placement

                $tip
                    .detach()
                    .css({ top: 0, left: 0, display: 'block' })

                this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)

                pos = this.getPosition()

                actualWidth = $tip[0].offsetWidth
                actualHeight = $tip[0].offsetHeight

                switch (placement) {
                    case 'bottom':
                        tp = {top: pos.top + pos.height, left: pos.left + pos.width / 2 - actualWidth / 2}
                        break
                    case 'top':
                        tp = {top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2}
                        break
                    case 'left':
                        tp = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth}
                        break
                    case 'right':
                        tp = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width}
                        break
                }

                this.applyPlacement(tp, placement)
                this.$element.trigger('shown')
            }
        }, applyPlacement: function (offset, placement) {
            var $tip = this.tip()
                , width = $tip[0].offsetWidth
                , height = $tip[0].offsetHeight
                , actualWidth
                , actualHeight
                , delta
                , replace

            $tip
                .offset(offset)
                .addClass(placement)
                .addClass('in')

            actualWidth = $tip[0].offsetWidth
            actualHeight = $tip[0].offsetHeight

            if (placement == 'top' && actualHeight != height) {
                offset.top = offset.top + height - actualHeight
                replace = true
            }

            if (placement == 'bottom' || placement == 'top') {
                delta = 0

                if (offset.left < 0) {
                    delta = offset.left * -2
                    offset.left = 0
                    $tip.offset(offset)
                    actualWidth = $tip[0].offsetWidth
                    actualHeight = $tip[0].offsetHeight
                }

                this.replaceArrow(delta - width + actualWidth, actualWidth, 'left')
            } else {
                this.replaceArrow(actualHeight - height, actualHeight, 'top')
            }

            if (replace) $tip.offset(offset)
        }, replaceArrow  : function (delta, dimension, position) {
            this
                .arrow()
                .css(position, delta ? (50 * (1 - delta / dimension) + "%") : '')
        }, setContent    : function () {
            var $tip = this.tip()
                , title = this.getTitle();
            $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title);
            $tip.removeClass('fade in top bottom left right');
        }, ellips        : function (elem) {

            var title = elem.text();
            if (this.options.length > 0 && title.length > this.options.length) {
                elem.text(title.slice(0, this.options.length) + this.options.suffix);

            }

        }, hide          : function () {
            var that = this
                , $tip = this.tip()
                , e = $.Event('hide')

            this.$element.trigger(e)
            if (e.isDefaultPrevented()) return

            $tip.removeClass('in')

            function removeWithAnimation() {
                var timeout = setTimeout(function () {
                    $tip.off($.support.transition.end).detach()
                }, 500)

                $tip.one($.support.transition.end, function () {
                    clearTimeout(timeout)
                    $tip.detach()
                })
            }

            $.support.transition && this.$tip.hasClass('fade') ?
                removeWithAnimation() :
                $tip.detach()

            this.$element.trigger('hidden')

            return this
        }, fixTitle      : function () {
            var $e = this.$element
            if ($e.attr('title') || typeof($e.attr('data-original-title')) != 'string') {
                this.ellips($e);
                $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
            }
        }, hasContent    : function () {
            return this.getTitle()
        }, getPosition   : function () {
            var el = this.$element[0]
            return $.extend({}, (typeof el.getBoundingClientRect == 'function') ? el.getBoundingClientRect() : {
                width: el.offsetWidth, height: el.offsetHeight
            }, this.$element.offset())
        }, getTitle      : function () {
            var title
                , $e = this.$element
                , o = this.options

            title = $e.attr('data-original-title')
                || (typeof o.title == 'function' ? o.title.call($e[0]) : o.title)

            return title
        }, tip           : function () {
            return this.$tip = this.$tip || $(this.options.template)
        }, arrow         : function () {
            return this.$arrow = this.$arrow || this.tip().find(".tooltip-arrow")
        }, validate      : function () {
            if (!this.$element[0].parentNode) {
                this.hide()
                this.$element = null
                this.options = null
            }
        }, enable        : function () {
            this.enabled = true
        }, disable       : function () {
            this.enabled = false
        }, toggleEnabled : function () {
            this.enabled = !this.enabled
        }, toggle        : function (e) {
            var self = e ? $(e.currentTarget)[this.type](this._options).data(this.type) : this
            self.tip().hasClass('in') ? self.hide() : self.show()
        }, destroy       : function () {
            this.hide().$element.off('.' + this.type).removeData(this.type)
        }

    }


    /* TOOLTIP PLUGIN DEFINITION
     * ========================= */

    var old = $.fn.ellipsistip

    $.fn.ellipsistip = function (option) {
        return this.each(function () {
            var $this = $(this)
                , data = $this.data('ellipsistip')
                , options = typeof option == 'object' && option
            if (!data) $this.data('ellipsistip', (data = new EllipsisTip(this, options)))
            if (typeof option == 'string') data[option]()
        })
    }

    $.fn.ellipsistip.Constructor = EllipsisTip

    $.fn.ellipsistip.defaults = {
        animation: true, placement: 'bottom', selector: false, template: '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>', trigger: 'hover focus', title: '', delay: 0, length: 0         // option added 0 is disabled the length to cut
        , suffix : '...'     // ellipsis suffix
        , html   : false, container: false
    }


    /* TOOLTIP NO CONFLICT
     * =================== */

    $.fn.ellipsistip.noConflict = function () {
        $.fn.ellipsistip = old
        return this
    }

}(window.jQuery);
/* =========================================================
 * bootstrap-modal.js v2.3.2
 * http://twitter.github.com/bootstrap/javascript.html#modals
 * =========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================= */


!function ($) {

    "use strict"; // jshint ;_;


    /* MODAL CLASS DEFINITION
     * ====================== */

    var Modal = function (element, options) {
        this.options = options
        this.$element = $(element)
            .delegate('[data-dismiss="modal"]', 'click.dismiss.modal', $.proxy(this.hide, this))
        this.options.remote && this.$element.find('.modal-body').load(this.options.remote)
    }

    Modal.prototype = {

        constructor          : Modal, toggle: function () {
            return this[!this.isShown ? 'show' : 'hide']()
        }, show              : function () {
            var that = this
                , e = $.Event('show')

            this.$element.trigger(e)

            if (this.isShown || e.isDefaultPrevented()) return

            this.isShown = true

            this.escape()

            this.backdrop(function () {
                var transition = $.support.transition && that.$element.hasClass('fade')

                if (!that.$element.parent().length) {
                    that.$element.appendTo(document.body) //don't move modals dom position
                }

                that.$element.show()

                if (transition) {
                    that.$element[0].offsetWidth // force reflow
                }

                that.$element
                    .addClass('in')
                    .attr('aria-hidden', false)

                that.enforceFocus()

                transition ?
                    that.$element.one($.support.transition.end, function () {
                        that.$element.focus().trigger('shown')
                    }) :
                    that.$element.focus().trigger('shown')

            })
        }, hide              : function (e) {
            e && e.preventDefault()

            var that = this

            e = $.Event('hide')

            this.$element.trigger(e)

            if (!this.isShown || e.isDefaultPrevented()) return

            this.isShown = false

            this.escape()

            $(document).off('focusin.modal')

            this.$element
                .removeClass('in')
                .attr('aria-hidden', true)

            $.support.transition && this.$element.hasClass('fade') ?
                this.hideWithTransition() :
                this.hideModal()
        }, enforceFocus      : function () {
            var that = this
            $(document).on('focusin.modal', function (e) {
                if (that.$element[0] !== e.target && !that.$element.has(e.target).length) {
                    that.$element.focus()
                }
            })
        }, escape            : function () {
            var that = this
            if (this.isShown && this.options.keyboard) {
                this.$element.on('keyup.dismiss.modal', function (e) {
                    e.which == 27 && that.hide()
                })
            } else if (!this.isShown) {
                this.$element.off('keyup.dismiss.modal')
            }
        }, hideWithTransition: function () {
            var that = this
                , timeout = setTimeout(function () {
                    that.$element.off($.support.transition.end)
                    that.hideModal()
                }, 500)

            this.$element.one($.support.transition.end, function () {
                clearTimeout(timeout)
                that.hideModal()
            })
        }, hideModal         : function () {
            var that = this
            this.$element.hide()
            this.backdrop(function () {
                that.removeBackdrop()
                that.$element.trigger('hidden')
            })
        }, removeBackdrop    : function () {
            this.$backdrop && this.$backdrop.remove()
            this.$backdrop = null
        }, backdrop          : function (callback) {
            var that = this
                , animate = this.$element.hasClass('fade') ? 'fade' : ''

            if (this.isShown && this.options.backdrop) {
                var doAnimate = $.support.transition && animate

                this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />')
                    .appendTo(document.body)

                this.$backdrop.click(
                        this.options.backdrop == 'static' ?
                        $.proxy(this.$element[0].focus, this.$element[0])
                        : $.proxy(this.hide, this)
                )

                if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

                this.$backdrop.addClass('in')

                if (!callback) return

                doAnimate ?
                    this.$backdrop.one($.support.transition.end, callback) :
                    callback()

            } else if (!this.isShown && this.$backdrop) {
                this.$backdrop.removeClass('in')

                $.support.transition && this.$element.hasClass('fade') ?
                    this.$backdrop.one($.support.transition.end, callback) :
                    callback()

            } else if (callback) {
                callback()
            }
        }
    }


    /* MODAL PLUGIN DEFINITION
     * ======================= */

    var old = $.fn.modal

    $.fn.modal = function (option) {
        return this.each(function () {
            var $this = $(this)
                , data = $this.data('modal')
                , options = $.extend({}, $.fn.modal.defaults, $this.data(), typeof option == 'object' && option)
            if (!data) $this.data('modal', (data = new Modal(this, options)))
            if (typeof option == 'string') data[option]()
            else if (options.show) data.show()
        })
    }

    $.fn.modal.defaults = {
        backdrop: true, keyboard: true, show: true
    }

    $.fn.modal.Constructor = Modal


    /* MODAL NO CONFLICT
     * ================= */

    $.fn.modal.noConflict = function () {
        $.fn.modal = old
        return this
    }


    /* MODAL DATA-API
     * ============== */

    $(document).on('click.modal.data-api', '[data-toggle="modal"]', function (e) {
        var $this = $(this)
            , href = $this.attr('href')
            , $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) //strip for ie7
            , option = $target.data('modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())

        e.preventDefault()

        $target
            .modal(option)
            .one('hide', function () {
                $this.focus()
            })
    })

}(window.jQuery);

/* ============================================================
 * bootstrap-dropdown.js v2.3.2
 * http://twitter.github.com/bootstrap/javascript.html#dropdowns
 * ============================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================ */


!function ($) {

    "use strict"; // jshint ;_;


    /* DROPDOWN CLASS DEFINITION
     * ========================= */

    var toggle = '[data-toggle=dropdown]'
        , Dropdown = function (element) {
            var $el = $(element).on('click.dropdown.data-api', this.toggle)
            $('html').on('click.dropdown.data-api', function () {
                $el.parent().removeClass('open')
            })
        }

    Dropdown.prototype = {

        constructor: Dropdown, toggle: function (e) {
            var $this = $(this)
                , $parent
                , isActive

            if ($this.is('.disabled, :disabled')) return

            $parent = getParent($this)

            isActive = $parent.hasClass('open')

            clearMenus()

            if (!isActive) {
                if ('ontouchstart' in document.documentElement) {
                    // if mobile we we use a backdrop because click events don't delegate
                    $('<div class="dropdown-backdrop"/>').insertBefore($(this)).on('click', clearMenus)
                }
                $parent.toggleClass('open')
            }

            $this.focus()

            return false
        }, keydown : function (e) {
            var $this
                , $items
                , $active
                , $parent
                , isActive
                , index

            if (!/(38|40|27)/.test(e.keyCode)) return

            $this = $(this)

            e.preventDefault()
            e.stopPropagation()

            if ($this.is('.disabled, :disabled')) return

            $parent = getParent($this)

            isActive = $parent.hasClass('open')

            if (!isActive || (isActive && e.keyCode == 27)) {
                if (e.which == 27) $parent.find(toggle).focus()
                return $this.click()
            }

            $items = $('[role=menu] li:not(.divider):visible a', $parent)

            if (!$items.length) return

            index = $items.index($items.filter(':focus'))

            if (e.keyCode == 38 && index > 0) index--                                        // up
            if (e.keyCode == 40 && index < $items.length - 1) index++                        // down
            if (!~index) index = 0

            $items
                .eq(index)
                .focus()
        }

    }

    function clearMenus() {
        $('.dropdown-backdrop').remove()
        $(toggle).each(function () {
            getParent($(this)).removeClass('open')
        })
    }

    function getParent($this) {
        var selector = $this.attr('data-target')
            , $parent

        if (!selector) {
            selector = $this.attr('href')
            selector = selector && /#/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') //strip for ie7
        }

        $parent = selector && $(selector)

        if (!$parent || !$parent.length) $parent = $this.parent()

        return $parent
    }


    /* DROPDOWN PLUGIN DEFINITION
     * ========================== */

    var old = $.fn.dropdown

    $.fn.dropdown = function (option) {
        return this.each(function () {
            var $this = $(this)
                , data = $this.data('dropdown')
            if (!data) $this.data('dropdown', (data = new Dropdown(this)))
            if (typeof option == 'string') data[option].call($this)
        })
    }

    $.fn.dropdown.Constructor = Dropdown


    /* DROPDOWN NO CONFLICT
     * ==================== */

    $.fn.dropdown.noConflict = function () {
        $.fn.dropdown = old
        return this
    }


    /* APPLY TO STANDARD DROPDOWN ELEMENTS
     * =================================== */

    $(document)
        .on('click.dropdown.data-api', clearMenus)
        .on('click.dropdown.data-api', '.dropdown form', function (e) {
            e.stopPropagation()
        })
        .on('click.dropdown.data-api', toggle, Dropdown.prototype.toggle)
        .on('keydown.dropdown.data-api', toggle + ', [role=menu]', Dropdown.prototype.keydown)

}(window.jQuery);
/**
 * Bootstrap.js by @fat & @mdo
 * plugins: bootstrap-modal.js, bootstrap-dropdown.js
 * Copyright 2012 Twitter, Inc.
 * http://www.apache.org/licenses/LICENSE-2.0.txt
 */
!function (a) {
    var b = function (b, c) {
        this.options = c, this.$element = a(b).delegate('[data-dismiss="modal"]', "click.dismiss.modal", a.proxy(this.hide, this)), this.options.remote && this.$element.find(".modal-body").load(this.options.remote)
    };
    b.prototype = {constructor: b, toggle: function () {
        return this[this.isShown ? "hide" : "show"]()
    }, show                   : function () {
        var b = this, c = a.Event("show");
        this.$element.trigger(c);
        if (this.isShown || c.isDefaultPrevented())return;
        this.isShown = !0, this.escape(), this.backdrop(function () {
            var c = a.support.transition && b.$element.hasClass("fade");
            b.$element.parent().length || b.$element.appendTo(document.body), b.$element.show(), c && b.$element[0].offsetWidth, b.$element.addClass("in").attr("aria-hidden", !1), b.enforceFocus(), c ? b.$element.one(a.support.transition.end, function () {
                b.$element.focus().trigger("shown")
            }) : b.$element.focus().trigger("shown")
        })
    }, hide                   : function (b) {
        b && b.preventDefault();
        var c = this;
        b = a.Event("hide"), this.$element.trigger(b);
        if (!this.isShown || b.isDefaultPrevented())return;
        this.isShown = !1, this.escape(), a(document).off("focusin.modal"), this.$element.removeClass("in").attr("aria-hidden", !0), a.support.transition && this.$element.hasClass("fade") ? this.hideWithTransition() : this.hideModal()
    }, enforceFocus           : function () {
        var b = this;
        a(document).on("focusin.modal", function (a) {
            b.$element[0] !== a.target && !b.$element.has(a.target).length && b.$element.focus()
        })
    }, escape                 : function () {
        var a = this;
        this.isShown && this.options.keyboard ? this.$element.on("keyup.dismiss.modal", function (b) {
            b.which == 27 && a.hide()
        }) : this.isShown || this.$element.off("keyup.dismiss.modal")
    }, hideWithTransition     : function () {
        var b = this, c = setTimeout(function () {
            b.$element.off(a.support.transition.end), b.hideModal()
        }, 500);
        this.$element.one(a.support.transition.end, function () {
            clearTimeout(c), b.hideModal()
        })
    }, hideModal              : function () {
        var a = this;
        this.$element.hide(), this.backdrop(function () {
            a.removeBackdrop(), a.$element.trigger("hidden")
        })
    }, removeBackdrop         : function () {
        this.$backdrop && this.$backdrop.remove(), this.$backdrop = null
    }, backdrop               : function (b) {
        var c = this, d = this.$element.hasClass("fade") ? "fade" : "";
        if (this.isShown && this.options.backdrop) {
            var e = a.support.transition && d;
            this.$backdrop = a('<div class="modal-backdrop ' + d + '" />').appendTo(document.body), this.$backdrop.click(this.options.backdrop == "static" ? a.proxy(this.$element[0].focus, this.$element[0]) : a.proxy(this.hide, this)), e && this.$backdrop[0].offsetWidth, this.$backdrop.addClass("in");
            if (!b)return;
            e ? this.$backdrop.one(a.support.transition.end, b) : b()
        } else!this.isShown && this.$backdrop ? (this.$backdrop.removeClass("in"), a.support.transition && this.$element.hasClass("fade") ? this.$backdrop.one(a.support.transition.end, b) : b()) : b && b()
    }};
    var c = a.fn.modal;
    a.fn.modal = function (c) {
        return this.each(function () {
            var d = a(this), e = d.data("modal"), f = a.extend({}, a.fn.modal.defaults, d.data(), typeof c == "object" && c);
            e || d.data("modal", e = new b(this, f)), typeof c == "string" ? e[c]() : f.show && e.show()
        })
    }, a.fn.modal.defaults = {backdrop: !0, keyboard: !0, show: !0}, a.fn.modal.Constructor = b, a.fn.modal.noConflict = function () {
        return a.fn.modal = c, this
    }, a(document).on("click.modal.data-api", '[data-toggle="modal"]', function (b) {
        var c = a(this), d = c.attr("href"), e = a(c.attr("data-target") || d && d.replace(/.*(?=#[^\s]+$)/, "")), f = e.data("modal") ? "toggle" : a.extend({remote: !/#/.test(d) && d}, e.data(), c.data());
        b.preventDefault(), e.modal(f).one("hide", function () {
            c.focus()
        })
    })
}(window.jQuery), !function (a) {
    function d() {
        a(".dropdown-backdrop").remove(), a(b).each(function () {
            e(a(this)).removeClass("open")
        })
    }

    function e(b) {
        var c = b.attr("data-target"), d;
        c || (c = b.attr("href"), c = c && /#/.test(c) && c.replace(/.*(?=#[^\s]*$)/, "")), d = c && a(c);
        if (!d || !d.length)d = b.parent();
        return d
    }

    var b = "[data-toggle=dropdown]", c = function (b) {
        var c = a(b).on("click.dropdown.data-api", this.toggle);
        a("html").on("click.dropdown.data-api", function () {
            c.parent().removeClass("open")
        })
    };
    c.prototype = {constructor: c, toggle: function (b) {
        var c = a(this), f, g;
        if (c.is(".disabled, :disabled"))return;
        return f = e(c), g = f.hasClass("open"), d(), g || ("ontouchstart"in document.documentElement && a('<div class="dropdown-backdrop"/>').insertBefore(a(this)).on("click", d), f.toggleClass("open")), c.focus(), !1
    }, keydown                : function (c) {
        var d, f, g, h, i, j;
        if (!/(38|40|27)/.test(c.keyCode))return;
        d = a(this), c.preventDefault(), c.stopPropagation();
        if (d.is(".disabled, :disabled"))return;
        h = e(d), i = h.hasClass("open");
        if (!i || i && c.keyCode == 27)return c.which == 27 && h.find(b).focus(), d.click();
        f = a("[role=menu] li:not(.divider):visible a", h);
        if (!f.length)return;
        j = f.index(f.filter(":focus")), c.keyCode == 38 && j > 0 && j--, c.keyCode == 40 && j < f.length - 1 && j++, ~j || (j = 0), f.eq(j).focus()
    }};
    var f = a.fn.dropdown;
    a.fn.dropdown = function (b) {
        return this.each(function () {
            var d = a(this), e = d.data("dropdown");
            e || d.data("dropdown", e = new c(this)), typeof b == "string" && e[b].call(d)
        })
    }, a.fn.dropdown.Constructor = c, a.fn.dropdown.noConflict = function () {
        return a.fn.dropdown = f, this
    }, a(document).on("click.dropdown.data-api", d).on("click.dropdown.data-api", ".dropdown form", function (a) {
        a.stopPropagation()
    }).on("click.dropdown.data-api", b, c.prototype.toggle).on("keydown.dropdown.data-api", b + ", [role=menu]", c.prototype.keydown)
}(window.jQuery)
/* ===========================================================
 * bootstrap-tooltip.js v2.3.2
 * http://getbootstrap.com/2.3.2/javascript.html#tooltips
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ===========================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */


!function ($) {

    "use strict"; // jshint ;_;


    /* TOOLTIP PUBLIC CLASS DEFINITION
     * =============================== */

    var Tooltip = function (element, options) {
        this.init('tooltip', element, options)
    }

    Tooltip.prototype = {

        constructor      : Tooltip, init: function (type, element, options) {
            var eventIn
                , eventOut
                , triggers
                , trigger
                , i

            this.type = type
            this.$element = $(element)
            this.options = this.getOptions(options)
            this.enabled = true

            triggers = this.options.trigger.split(' ')

            for (i = triggers.length; i--;) {
                trigger = triggers[i]
                if (trigger == 'click') {
                    this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
                } else if (trigger != 'manual') {
                    eventIn = trigger == 'hover' ? 'mouseenter' : 'focus'
                    eventOut = trigger == 'hover' ? 'mouseleave' : 'blur'
                    this.$element.on(eventIn + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
                    this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
                }
            }

            this.options.selector ?
                (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
                this.fixTitle()
        }, getOptions    : function (options) {
            options = $.extend({}, $.fn[this.type].defaults, this.$element.data(), options)

            if (options.delay && typeof options.delay == 'number') {
                options.delay = {
                    show: options.delay, hide: options.delay
                }
            }

            return options
        }, enter         : function (e) {
            var defaults = $.fn[this.type].defaults
                , options = {}
                , self

            this._options && $.each(this._options, function (key, value) {
                if (defaults[key] != value) options[key] = value
            }, this)

            self = $(e.currentTarget)[this.type](options).data(this.type)

            if (!self.options.delay || !self.options.delay.show) return self.show()

            clearTimeout(this.timeout)
            self.hoverState = 'in'
            this.timeout = setTimeout(function () {
                if (self.hoverState == 'in') self.show()
            }, self.options.delay.show)
        }, leave         : function (e) {
            var self = $(e.currentTarget)[this.type](this._options).data(this.type)

            if (this.timeout) clearTimeout(this.timeout)
            if (!self.options.delay || !self.options.delay.hide) return self.hide()

            self.hoverState = 'out'
            this.timeout = setTimeout(function () {
                if (self.hoverState == 'out') self.hide()
            }, self.options.delay.hide)
        }, show          : function () {
            var $tip
                , pos
                , actualWidth
                , actualHeight
                , placement
                , tp
                , e = $.Event('show')

            if (this.hasContent() && this.enabled) {
                this.$element.trigger(e)
                if (e.isDefaultPrevented()) return
                $tip = this.tip()
                this.setContent()

                if (this.options.animation) {
                    $tip.addClass('fade')
                }

                placement = typeof this.options.placement == 'function' ?
                    this.options.placement.call(this, $tip[0], this.$element[0]) :
                    this.options.placement

                $tip
                    .detach()
                    .css({ top: 0, left: 0, display: 'block' })

                this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)

                pos = this.getPosition()

                actualWidth = $tip[0].offsetWidth
                actualHeight = $tip[0].offsetHeight

                switch (placement) {
                    case 'bottom':
                        tp = {top: pos.top + pos.height, left: pos.left + pos.width / 2 - actualWidth / 2}
                        break
                    case 'top':
                        tp = {top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2}
                        break
                    case 'left':
                        tp = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth}
                        break
                    case 'right':
                        tp = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width}
                        break
                }

                this.applyPlacement(tp, placement)
                this.$element.trigger('shown')
            }
        }, applyPlacement: function (offset, placement) {
            var $tip = this.tip()
                , width = $tip[0].offsetWidth
                , height = $tip[0].offsetHeight
                , actualWidth
                , actualHeight
                , delta
                , replace

            $tip
                .offset(offset)
                .addClass(placement)
                .addClass('in')

            actualWidth = $tip[0].offsetWidth
            actualHeight = $tip[0].offsetHeight

            if (placement == 'top' && actualHeight != height) {
                offset.top = offset.top + height - actualHeight
                replace = true
            }

            if (placement == 'bottom' || placement == 'top') {
                delta = 0

                if (offset.left < 0) {
                    delta = offset.left * -2
                    offset.left = 0
                    $tip.offset(offset)
                    actualWidth = $tip[0].offsetWidth
                    actualHeight = $tip[0].offsetHeight
                }

                this.replaceArrow(delta - width + actualWidth, actualWidth, 'left')
            } else {
                this.replaceArrow(actualHeight - height, actualHeight, 'top')
            }

            if (replace) $tip.offset(offset)
        }, replaceArrow  : function (delta, dimension, position) {
            this
                .arrow()
                .css(position, delta ? (50 * (1 - delta / dimension) + "%") : '')
        }, setContent    : function () {
            var $tip = this.tip()
                , title = this.getTitle()

            $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
            $tip.removeClass('fade in top bottom left right')
        }, hide          : function () {
            var that = this
                , $tip = this.tip()
                , e = $.Event('hide')

            this.$element.trigger(e)
            if (e.isDefaultPrevented()) return

            $tip.removeClass('in')

            function removeWithAnimation() {
                var timeout = setTimeout(function () {
                    $tip.off($.support.transition.end).detach()
                }, 500)

                $tip.one($.support.transition.end, function () {
                    clearTimeout(timeout)
                    $tip.detach()
                })
            }

            $.support.transition && this.$tip.hasClass('fade') ?
                removeWithAnimation() :
                $tip.detach()

            this.$element.trigger('hidden')

            return this
        }, fixTitle      : function () {
            var $e = this.$element
            if ($e.attr('title') || typeof($e.attr('data-original-title')) != 'string') {
                $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
            }
        }, hasContent    : function () {
            return this.getTitle()
        }, getPosition   : function () {
            var el = this.$element[0]
            return $.extend({}, (typeof el.getBoundingClientRect == 'function') ? el.getBoundingClientRect() : {
                width: el.offsetWidth, height: el.offsetHeight
            }, this.$element.offset())
        }, getTitle      : function () {
            var title
                , $e = this.$element
                , o = this.options

            title = $e.attr('data-original-title')
                || (typeof o.title == 'function' ? o.title.call($e[0]) : o.title)

            return title
        }, tip           : function () {
            return this.$tip = this.$tip || $(this.options.template)
        }, arrow         : function () {
            return this.$arrow = this.$arrow || this.tip().find(".tooltip-arrow")
        }, validate      : function () {
            if (!this.$element[0].parentNode) {
                this.hide()
                this.$element = null
                this.options = null
            }
        }, enable        : function () {
            this.enabled = true
        }, disable       : function () {
            this.enabled = false
        }, toggleEnabled : function () {
            this.enabled = !this.enabled
        }, toggle        : function (e) {
            var self = e ? $(e.currentTarget)[this.type](this._options).data(this.type) : this
            self.tip().hasClass('in') ? self.hide() : self.show()
        }, destroy       : function () {
            this.hide().$element.off('.' + this.type).removeData(this.type)
        }

    }


    /* TOOLTIP PLUGIN DEFINITION
     * ========================= */

    var old = $.fn.tooltip

    $.fn.tooltip = function (option) {
        return this.each(function () {
            var $this = $(this)
                , data = $this.data('tooltip')
                , options = typeof option == 'object' && option
            if (!data) $this.data('tooltip', (data = new Tooltip(this, options)))
            if (typeof option == 'string') data[option]()
        })
    }

    $.fn.tooltip.Constructor = Tooltip

    $.fn.tooltip.defaults = {
        animation: true, placement: 'top', selector: false, template: '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>', trigger: 'hover focus', title: '', delay: 0, html: false, container: false
    }


    /* TOOLTIP NO CONFLICT
     * =================== */

    $.fn.tooltip.noConflict = function () {
        $.fn.tooltip = old
        return this
    }

}(window.jQuery);

var NS = function () {
};
NS = NS.prototype = function () {
};
NS.Package = function (sName) {
    var namespaces = sName.split('.') || [sName];
    var nlen = namespaces.length;
    var root = window;
    var f = function () {
    };
    for (var i = 0; i < nlen; i++) {
        var ns = namespaces[i];
        if (typeof(root[ns]) === 'undefined') {
            root = root[ns] = {};
            root = root.prototype = f;
        }
        else
            root = root[ns];
    }
};
NS.Package('NS.UT');
NS.Package('NS.LANG');
NS.Package('NS.App');
window["$IE"] = false;
window["$UT"] = NS.UT;
window["$L"] = NS.LANG;
window["$App"] = NS.App;
NS.Package('NS.G');
NS.G = {debugModel: true, development: false};
window["$G"] = NS.G;
if (!window['console']) {
    window.console = {};
    window.console.error = function (param) {
    };
    window.console.info = function (param) {
    };
    window.console.log = function (param) {
    };
    window.console.warn = function (param) {
    };
}
window["$$"] = function (param) {
    if ($G.debugModel) {
        (!window.console) ? alert(param) : console.log(param);
    }
};
Function.prototype.method = function (name, fn) {
    this.prototype[name] = fn;
};
(function ($) {
    NS.Package('NS.LANG');
    NS.LANG.errorLogging = true;
    NS.LANG.replaceValueInToString = function (vars, str) {
        for (var i in vars) {
            str = str.replace(RegExp('{' + i + '}'), vars[i], str);
        }
        return str;
    };
    NS.LANG.noticeError = function (reverence, message, error_reporting) {
        if (NS.LANG.errorLogging) {
            if (error_reporting) {
                var text = message + ' ';
                text += reverence;
                console.warn('LANGUAGE ERROR ' + text);
            }
        }
    };
    NS.LANG.getLang = function (namespace, vars, error_reporting, getObj) {
        var vars = vars || {};
        var getObj = getObj || false;
        var error_reporting = (error_reporting == undefined) ? true : error_reporting;
        var namespaces = [];
        var obj = {};
        var str = '';
        var style = 'style="margin: 2px;"';
        if (namespace.indexOf('.') !== -1) {
            namespaces = namespace.split('.');
            for (var i = 0; i < namespaces.length; i++) {
                var ns = namespaces[i];
                if (i == 0) {
                    if (NS.LANG[ns]) {
                        obj = NS.LANG[ns];
                        str += '.' + ns;
                    } else {
                        NS.LANG.noticeError(str, 'object reference desent exist', error_reporting);
                        return'[label]';
                    }
                } else {
                    str += '.' + ns;
                    if (obj[ns]) {
                        obj = obj[ns];
                        if (typeof(obj) == 'string') {
                            return NS.LANG.replaceValueInToString(vars, obj);
                        }
                    } else {
                        NS.LANG.noticeError(str, 'object reference desent exist', error_reporting);
                        return'[label]';
                    }
                }
            }
            if (typeof(obj) == 'string') {
                return NS.LANG.replaceValueInToString(vars, obj);
            } else {
                if (!getObj) {
                    NS.LANG.noticeError(str, 'object string reverence not reached', error_reporting);
                    return'[label]';
                } else {
                    return obj;
                }
            }
        } else {
            if (NS.LANG[namespace]) {
                if (typeof(NS.LANG[namespace]) == 'string') {
                    return NS.LANG.replaceValueInToString(vars, NS.LANG[namespace]);
                } else {
                    if (!getObj) {
                        NS.LANG.noticeError(str, 'object string reverence not reached', error_reporting);
                        return'[label]'
                    } else {
                        return NS.LANG[namespace];
                    }
                }
            } else {
                NS.LANG.noticeError(str, 'object reference desent exist', error_reporting);
                return'[label]';
            }
        }
    };
    NS.LANG.getLangObject = function (namespace, error_reporting) {
        var error_reporting = (error_reporting == undefined) ? true : error_reporting;
        return NS.LANG.getLang(namespace, {}, error_reporting, true);
    };
})(jQuery);
NS.Package('NS.UT.Image');
(function ($) {
    NS.UT.Image = function () {
        var method = {worning: 'src is not defined!', get: function (object) {
            var img = new Image();
            if (img.src == undefined) {
                $$(method.worning);
                return;
            }
            img.src = object.src;
            if (NS.UT.Tools.IE) {
                $(img).ready(function () {
                    if (object.succes) {
                        object.succes(img);
                    }
                });
            } else {
                img.onload = function () {
                    if (object.succes) {
                        object.succes(img);
                    }
                }
            }
            img.onerror = function () {
                if (object.error) {
                    object.error(img);
                }
            }
        }, getSize           : function (src, functn) {
            var img = new Image();
            img.src = src;
            if (NS.UT.Tools.IE) {
                $(img).ready(function () {
                    if (functn) {
                        functn({height: img.height, width: img.width});
                    }
                });
            } else {
                img.onload = function () {
                    if (functn) {
                        functn({height: img.height, width: img.width});
                    }
                }
            }
        }};
        return function () {
            return{get: method.get, getSize: method.getSize};
        }
    }();
})(jQuery);
NS.Package('NS.App.Observer');
NS.App.Observer = function () {
    this.fn = [];
};
NS.App.Observer.prototype = {addListenerOnce: function (type, fn) {
    this.fn.push({type: type, fn: fn, once: true});
}, addListener                              : function (type, fn) {
    this.fn.push({type: type, fn: fn, once: false});
}, removeListener                           : function (type) {
    for (var i = 0; i < this.fn.length; i++) {
        if (this.fn[i].type == type) {
            this.fn.splice(i, 1);
        }
    }
}, fire                                     : function (type, param) {
    for (var i = 0; i < this.fn.length; i++) {
        if (this.fn[i].type == type) {
            this.fn[i].fn.apply(this, Array.prototype.slice.call(arguments, 1));
            if (this.fn[i].once) {
                this.fn.splice(i, 1);
            }
        }
    }
}};
NS.Package('NS.UT.Tools');
(function ($) {
    NS.UT.Tools = {version  : '2.4.5', getIEVersion: function () {
        var rv = -1;
        if (navigator.appName == 'Microsoft Internet Explorer') {
            var ua = navigator.userAgent;
            var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
            if (re.exec(ua) != null)
                rv = parseFloat(RegExp.$1);
        }
        return rv;
    }, trim                 : function (value, character) {
        if (value != undefined) {
            var _str = character || 's';
            var _reg = new RegExp("^\\" + _str + "+|\\" + _str + "+$", "g");
            return((value == '') ? value : value.replace(_reg, ''));
        }
    }, isEmpty              : function (data) {
        if (typeof(data) === 'string') {
            return(data == '') ? true : false;
        } else if (NS.UT.Tools.isArray(data)) {
            return(data.length == 0) ? true : false;
        } else {
            var _count = 0;
            for (var i in data) {
                _count++;
                if (_count > 0) {
                    break;
                }
            }
            return(_count == 0) ? true : false;
        }
    }, updateObjectReverence: function (data, reverence) {
        for (var i in data) {
            if (data.hasOwnProperty(i)) {
                if (typeof(data[i]) == 'object') {
                    if (reverence[i] == undefined) {
                        reverence[i] = {};
                    }
                    this.updateObjectReverence(data[i], reverence[i]);
                } else {
                    if (typeof(data[i]) == 'string') {
                        reverence[i] = data[i].convert();
                    } else {
                        reverence[i] = data[i];
                    }
                }
            }
        }
        return reverence;
    }, size                 : function (obj) {
        if (typeof(obj) === "object") {
            var c = 0;
            for (var o in obj) {
                if (obj.hasOwnProperty(o)) {
                    c++;
                }
            }
            return c;
        } else {
            return obj.length;
        }
    }, isObject             : function (str, obj_reverence) {
        var namespaces = [];
        var obj = {};
        var reverence = obj_reverence || window;
        if (str.indexOf('.') !== -1) {
            namespaces = str.split('.');
            for (var i = 0; i < namespaces.length; i++) {
                var ns = namespaces[i];
                if (i == 0) {
                    if (reverence[ns] !== undefined) {
                        obj = reverence[ns];
                    } else {
                        return false;
                    }
                } else {
                    if (obj[ns] !== undefined) {
                        obj = obj[ns];
                    } else {
                        return false;
                    }
                }
            }
        } else {
            if (reverence[str] === undefined) {
                return false;
            }
        }
        return true;
    }, parseFloat           : function (value) {
        value = NS.UT.Tools.trim(value);
        if (new RegExp("^[0-9]+(\\,)+[0-9]+$", "").test(value)) {
            value = value.replace(new RegExp("\\,", "g"), '.');
        }
        return parseFloat(value);
    }, isNumber             : function (str) {
        if (str) {
            str = NS.UT.Tools.trim(str);
            if (new RegExp("^[0-9]+(\\,)+[0-9]+$", "").test(str)) {
                str = str.trim().replace(new RegExp("\\,", "g"), '.');
            }
            return(isNaN(str)) ? false : true;
        }
        return false;
    }, nl2br                : function (value) {
        if (value && typeof(value) === 'string') {
            return value.replace(new RegExp('\\n|\\r', 'g'), '<br />');
        }
    }, ucwords              : function (str) {
        var _newstr = '';
        str = str.split(' ');
        for (var c = 0; c < str.length; c++) {
            _newstr += str[c].substring(0, 1).toUpperCase() + str[c].substring(1, str[c].length) + '';
        }
        return _newstr;
    }, prettyText           : function (str) {
        str = NS.UT.Tools.ucwords(str);
        return str.replace(new RegExp('_'), ' ', str);
    }, stripslashes         : function (str) {
        return(str + '').replace(new RegExp("\\\\(.?)", "g"), function (s, n1) {
            switch (n1) {
                case'\\':
                    return'\\';
                case'0':
                    return'\u0000';
                case'':
                    return'';
                default:
                    return n1;
            }
        });
    }, isLoacalhost         : function (host) {
        host = host || [];
        var _adress = ['localhost', '127.0.0.1', 'server'];
        _adress.push(host);
        for (var i = 0; i < _adress.length; i++) {
            if (_adress[i] == window.location.host) {
                return true;
            }
        }
        return false;
    }, isArray              : function (obj) {
        if (obj) {
            if (obj.constructor.toString().indexOf("Array") == -1) {
                return false;
            } else {
                return true;
            }
        }
        return false;
    }, createId             : function (prefix) {
        prefix = prefix || '';
        var _str = '';
        for (var i = 0; i < 5; i++) {
            _str += Math.floor(Math.random() * 10);
        }
        return prefix + _str + '-' + new Date().getTime();
    }, sleep                : function (fn, time) {
        var counter = 0;
        var t = window.setTimeout(function () {
            fn(counter++);
            window.clearTimeout(t);
        }, time);
    }, timer                : function (fn, time) {
        var counter = 0;
        var t = window.setInterval(function () {
            fn(counter++);
        }, time);
        return{stop: function () {
            window.clearInterval(t);
        }}
    }, timerInst            : {}, delay: function (fn, time) {
        if (NS.UT.Tools.timerInst.stop) {
            NS.UT.Tools.timerInst.stop();
        }
        NS.UT.Tools.timerInst = $UT.timer(function (i) {
            NS.UT.Tools.timerInst.stop();
            if (fn) {
                fn(i);
            }
        }, time);
    }, getAttributes        : function (elem) {
        var _elem = (elem.length > 0) ? elem : $(elem), _data = {};
        if (typeof(_elem[0]) == 'object') {
            for (var i = 0; i < _elem[0].attributes.length; i++) {
                _data[_elem[0].attributes[i].nodeName] = _elem[0].attributes[i].nodeValue;
            }
            return _data;
        }
        return false;
    }, loader               : function (obj) {
        var div = $('<div>');
        var text = $('<div>');
        var loader = $('<img>');
        obj = obj || {};
        obj.src = (obj.src) ? loader.attr({src: obj.src}) : '';
        obj.cssClass = (obj.cssClass) ? div.addClass(obj.cssClass) : '';
        obj.css = (obj.css) ? div.css(obj.css) : '';
        obj.id = (obj.id) ? obj.id : 'ut-loader';
        div.attr({id: obj.id}).appendTo(obj.target);
        if (obj.center) {
            div.css({'position': 'absolute', 'z-index': '1000001', 'top': obj.top || Math.round(($(obj.target).height() - div.height()) / 2), 'left': obj.left || Math.round(($(obj.target).width() - div.width()) / 2)});
        }
        loader.appendTo(div);
        (obj.text) ? text.html(obj.text).appendTo(div) : '';
        if (obj.overlay) {
            $('<div>').attr({id: obj.id + '-overlay'}).css({'z-index': '1000000', 'height': $(obj.target).height(), 'width': $(obj.target).width()}).appendTo(obj.target);
        }
        return{remove: function (target) {
            $(target).remove();
            $(target + '-overlay').remove();
        }}
    }, getUrlVars           : function (str, bool) {
        var _pieces = str.replace(new RegExp("^.*(\\?)"), '').split("&"), _values = [], _data = {};
        for (var i = 0; i < _pieces.length; i++) {
            _values = _pieces[i].split("=");
            _data[_values[0]] = (bool) ? decodeURIComponent(_values[1]) : _values[1];
        }
        return _data;
    }, isNumeric            : function (value) {
        return new RegExp('^[0-9]*(\\.)?[0-9]*$').test(value);
    }, parseVars            : function (data, setings) {
        setings = setings || {};
        for (var i in data) {
            if (data.hasOwnProperty(i)) {
                if (typeof(data[i]) === 'object') {
                    if (setings[i] == undefined) {
                        setings[i] = data[i];
                    }
                    this.parseVars(data[i], setings[i]);
                } else {
                    setings[i] = data[i].convert();
                }
            }
        }
        return setings;
    }, getRelativeViewPort  : function (factor, target) {
        target = target || 'body';
        var _height = $(target).height(), _width = $(target).width();
        return{height: Math.round((factor / 100) * _height), width: Math.round((factor / 100) * _width)}
    }, boundaryViewPort     : function (option, factor) {
        option.viewport = option.viewport || window;
        var _viewport_height = $(option.viewport).height(), _viewport_width = $(option.viewport).width(), _element_height = $(option.element).height(), _element_width = $(option.element).width(), _factorHeight = (factor) ? Math.round((factor / 100) * _viewport_height) : 0, _factorWidth = (factor) ? Math.round((factor / 100) * _viewport_width) : 0, _event = (option.event.offset) ? option.event.offset() : option.event;
        return{top: (((_viewport_height - _event.top) + _element_height) > (_viewport_height - _factorHeight)) ? true : false, right: ((_event.left + _element_width) > (_viewport_width - _factorHeight)) ? true : false, bottom: ((_event.top + _element_height) > (_viewport_height - _factorHeight)) ? true : false, left: (_event.left < _element_width) ? true : false}
    }, isExtension          : function (pattern, subject) {
        if (typeof(pattern) == 'string') {
            if (new RegExp(pattern, 'gi').test(subject)) {
                return true;
            }
        } else {
            for (var i = 0; i < pattern.length; i++) {
                if (new RegExp(pattern[i], 'gi').test(subject)) {
                    return true;
                }
            }
        }
        return false;
    }, getExtension         : function (param) {
        return param.replace(new RegExp("/.*(\.)/"), '');
    }, getFile              : function (param) {
        return param.replace(new RegExp(".*(\/)"), '');
    }, getPath              : function (param) {
        return param.slice(0, param.lastIndexOf('/') + 1);
    }};
    NS.UT.Tools.aspectRatio = function (option) {
        if (option.newHeight) {
            var _h = option.currentHeight;
            var _w = option.currentWidth;
            var _newWidth = (option.newHeight * _w) / _h;
            return{width: Math.round(_newWidth), height: option.newHeight}
        } else if (option.newWidth) {
            var _h = option.currentHeight;
            var _w = option.currentWidth;
            var _newHeight = (option.newWidth * _h) / _w;
            return{width: option.newWidth, height: Math.round(_newHeight)}
        } else {
            $$('the option input is empty or not a valid input!')
        }
    };
    NS.UT.Tools.boundary = function (option) {
        var _result = {width: 0, height: 0};
        var _getWidth = this.aspectRatio({currentWidth: option.currentWidth, currentHeight: option.currentHeight, newHeight: option.height});
        var _newSize = this.aspectRatio({currentWidth: _getWidth.width, currentHeight: _getWidth.height, newWidth: option.width});
        if (_newSize.height > option.height) {
            _result.height = option.height;
        } else {
            _result.height = _newSize.height;
        }
        if (_getWidth.width > option.width) {
            _result.width = option.width;
        } else {
            _result.width = _getWidth.width;
        }
        return _result;
    };
    NS.UT.Tools.inlineLoader = function (option) {
        option = option || {};
        var _option = {target: option.target || '.inline-loader', loadText: option.loadText || 'sending', loadImg: (option.loadImg == undefined) ? false : option.loadImg, seccesText: option.seccesText || 'De inforamtie is succesvol verstuurd.', seccesImg: option.seccesImg || 'images/icons/16x16/accept.png', errorText: option.errorText || 'Server error on request!', errorImg: option.errorImg || 'images/icons/16x16/error.png', onOpen: option.onOpen || false, onClose: option.onClose || false};
        var _loader = $(_option.target);
        var _span = _loader.find('span');
        var _img = _loader.find('img');
        var _src = _img.attr('src');
        var _c = 0;
        var _timer = function () {
        };
        return{target: $(_option.target), open: function (fn) {
            if (_loader.length > 0) {
                if (_option.onOpen) {
                    _option.onOpen(_loader);
                }
                if (_option.loadImg) {
                    _img.attr('src', _option.loadImg);
                }
                _span.text(_option.loadText);
                _timer = NS.UT.Tools.timer(function () {
                    _c++;
                    var _point = '.';
                    if (_c == 4) {
                        _c = 0;
                    }
                    for (var i = 0; i < _c; i++) {
                        _point += '.';
                    }
                    _span.html(_option.loadText + '' + _point + '');
                }, 800);
                _loader.css('display', 'inline-block');
                if (fn) {
                    fn(_loader);
                }
            }
        }, success   : function (text, fn) {
            _option.loadText = text;
            this.close(fn, text);
        }, close     : function (fn, text) {
            if (_loader.length > 0) {
                _option.seccesText = text || _option.seccesText;
                _timer.stop();
                _img.attr('src', _option.seccesImg);
                _span.html(_option.seccesText);
                NS.UT.Tools.sleep(function () {
                    _loader.hide();
                    _img.attr('src', _src);
                    _span.text(_option.loadText);
                    if (fn) {
                        fn(_loader);
                    }
                    if (_option.onClose) {
                        _option.onClose(_loader);
                    }
                }, 2000);
            }
        }, error     : function (text) {
            if (_loader.length > 0) {
                text = text || _option.errorText;
                _timer.stop();
                _img.attr('src', _option.errorImg);
                _span.html('<span class="black">' + text + '</span>');
            }
        }}
    };
    NS.UT.Tools.getScrollPosition = function () {
        var scrOfX = 0, scrOfY = 0;
        if (typeof(window.pageYOffset) == 'number') {
            scrOfY = window.pageYOffset;
            scrOfX = window.pageXOffset;
        } else if (document.body && (document.body.scrollLeft || document.body.scrollTop)) {
            scrOfY = document.body.scrollTop;
            scrOfX = document.body.scrollLeft;
        } else if (document.documentElement && (document.documentElement.scrollLeft || document.documentElement.scrollTop)) {
            scrOfY = document.documentElement.scrollTop;
            scrOfX = document.documentElement.scrollLeft;
        }
        return{X: scrOfX, Y: scrOfY}
    };
    NS.UT.Tools.fieldFocus = function (selector, reset) {
        var _selector = $(selector);
        var reset = (reset == undefined) ? true : reset;
        for (i = 0; i < _selector.length; i++) {
            (function (_this) {
                var _cash = '', _default = '';
                $(_this).bind('focus.fieldFocus', function () {
                    var _self = $(this);
                    if (_default == '' || _self.val() == _default) {
                        _default = _self.val();
                        _self.val('');
                    }
                    _self.removeClass('fieldBlur');
                    _self.addClass('fieldFocus');
                });
                $(_this).bind('blur.fieldFocus', function () {
                    var _self = $(this);
                    if (reset) {
                        if (_self.val() == '') {
                            _self.val(_default);
                        } else {
                            _cash = _self.val();
                        }
                    }
                    _self.removeClass('fieldFocus');
                    _self.addClass('fieldBlur');
                });
            })($(_selector[i]));
        }
    };
    NS.UT.Tools.isMobile = function () {
        var agents = ['android', 'webos', 'iphone', 'ipad', 'blackberry'];
        for (var i in agents) {
            if (navigator.userAgent.match('/' + agents[i] + '/i')) {
                return true;
            }
        }
        return false;
    };
    String.prototype.isNumeric = function () {
        return new RegExp('^[0-9]*(\\.)?[0-9]*$').test(this);
    };
    String.prototype.convert = function () {
        if (typeof(this) !== 'boolean' || typeof(this) !== 'object') {
            if (this == 'true') {
                return true;
            } else if (this == 'false') {
                return false;
            } else if (this == 'null') {
                return null;
            } else if (this.isNumeric()) {
                return parseFloat(this);
            } else {
                return this.toString();
            }
        } else {
            return this;
        }
    };
    Array.prototype.indexOf = function (obj, start) {
        for (var i = (start || 0), j = this.length; i < j; i++) {
            if (this[i] === obj) {
                return i;
            }
        }
        return-1;
    };
    $.extend(NS.UT, NS.UT.Tools);
})(jQuery);
(function ($) {
    NS.Package('NS.App.mets2Viever');
    NS.Package('NS.App.mets2');
    App = NS.App;
    App.mets2Viewer = function (option) {
        var model = new App.mets2.Model(option);
        var view = new App.mets2.View(model);
        return new App.mets2.Controller(model, view);
    };
    $.fn.extend({mets2Viewer: function (options) {
        options.target = this;
        options.layout = options.layout || 'thumbnail';
        options.debug = (options.debug == undefined) ? false : options.debug;
        options.initialize.url = options.initialize.url || 'https://visualmets.socialhistory.org/rest/document?';
        options.initialize.defaults = (options.initialize.defaults == undefined) ? false : options.initialize.defaults;
        var model = new App.mets2.Model(options);
        var view = new App.mets2.View(model);
        var controller = new App.mets2.Controller(model, view);
        controller.init(options.initialize);
        controller.load();
        return controller;
    }});
    Function.prototype.extend = function (arg1, arg2) {
        arg1 = arg1 || null;
        arg2 = arg2 || null;
        if (typeof(arg1) === "string" && typeof(arg2) === 'function') {
            this.prototype[arg1] = arg2;
        }
        else if (typeof(arg1) === "object" && arg2 == null) {
            jQuery.extend(true, this.prototype, arg1);
        }
    };
    Function.prototype.route = function (arg1, arg2) {
        arg1 = arg1 || null;
        arg2 = arg2 || null;
        if (typeof(arg1) === 'string' && typeof(arg2) === 'object') {
            if (!this.prototype['events']) {
                this.prototype['events'] = {};
            }
            this.prototype['events'][arg1] = arg2;
        }
    };
    App.mets2.Implement = function (reverence, Interface) {
        var methods = {methodExist: function (method) {
            var fount = false;
            var i = 0;
            while (!fount && i < $UT.size(reverence)) {
                if (reverence[method]) {
                    fount = true;
                }
                i++;
            }
            return fount;
        }};
        if (App.mets2[Interface]) {
            var interfc = new App.mets2[Interface]();
            if (reverence && !reverence['name']) {
                console.error("INTERFACE EXCEPTION on [" + Interface + "] requires field [name]");
            } else {
                for (var name in interfc) {
                    if (interfc.hasOwnProperty(name)) {
                        if (!methods.methodExist(name) && typeof(interfc[name]) === "function") {
                            console.warn('INTERFACE WARNING, the method [' + name + '] is not yet implemented in to [' + $UT.ucwords(reverence.name) + 'Layout]!');
                            reverence[name] = interfc[name];
                        } else {
                            if (!reverence[name] || (typeof(reverence[name]) !== typeof(interfc[name]))) {
                                console.warn('INTERFACE WARNING, the field {[' + name + ']' + ((!typeof(reverence[name]) !== undefined) ? ':' + typeof(interfc[name]) : '') + '} is not or incorrectly implemented in to  [' + $UT.ucwords(reverence.name) + 'Layout]!');
                                reverence[name] = interfc[name];
                            }
                        }
                    }
                }
            }
        } else {
            console.error("INTERFACE EXCEPTION error, interface [" + Interface + "] dos not exist", App.mets2);
        }
    };
    App.mets2.Model = function (options) {
        this.frame = [];
        this.version = '2.1.8.3';
        this.url = "";
        this.Document = null;
        this.param = {};
        this.imageParam = {};
        this.metsId = "";
        this.options = {};
        this.themePath = 'css/themes/';
        this.theme = 'default';
        this.autoOptionMapping(options);
        this.getVersion = function () {
            return version;
        };
        this.getDocument = function () {
            return this.Document;
        };
        this.setDocument = function (doc) {
            this.Document = doc;
        };
        this.getParam = function () {
            return this.param;
        };
        this.setParam = function (param) {
            this.param = param;
        };
        this.isDebugActive = function () {
            return this.debugMode;
        };
        this.getUrl = function () {
            return this.url;
        };
        this.setUrl = function (url) {
            this.url = url;
        };
        this.addParamToImage = function (param) {
            this.imageParam = $.extend(this.imageParam, param);
        };
        this.resetParamImage = function () {
            this.imageParam = {};
        };
        this.getImageParam = function () {
            return this.imageParam;
        };
        this.getImageUrl = function () {
            return this.getDocumentPages()[0].url + '&' + $.param(this.getImageParam());
        };
        this.getThumbnailUrl = function () {
            return this.getDocumentPages()[0].transcription_url;
        };
        this.getTranscriptionUrl = function () {
            return this.getDocumentPages()[0].transcription_url;
        };
        this.setImageUrl = function (url) {
            this.getPages()[0].url = url;
        };
        this.hasDocumentPages = function () {
            var status = false;
            try {
                if (this.Document.pager.pages.page) {
                    if (this.Document.pager.pages.page.length > 0) {
                        status = true;
                    }
                }
            } catch (e) {
                status = false;
            }
            return status;
        };
        this.getDocumentPager = function () {
            var pager = {};
            if (this.hasDocumentPages()) {
                pager = this.Document.pager;
            }
            return pager;
        };
        this.getDocumentPages = function () {
            var pages = [];
            if (this.hasDocumentPages()) {
                pages = this.getDocumentPager().pages.page;
            }
            return pages;
        };
        this.getPDFurl = function () {
            var url = '';
            if (this.hasDocumentPages()) {
                url = this.getDocument().pdfUrl;
            }
            return url;
        };
        this.getMetsID = function () {
            return this.metsId;
        };
        this.setMetsID = function (id) {
            this.metsId = id;
        };
        this.isDifferentMetsID = function () {
            return(this.metsId !== this.getDocument().metsId);
        };
        this.getTheme = function () {
            return this.theme;
        };
        this.getThemePath = function () {
            return this.getHostUrl() + '/' + this.themePath + this.getTheme() + '/';
        };
        this.getLabel = function (str, param) {
            var output = '';
            if (param) {
                output = NS.LANG.getLang(this.language + '.' + str, param);
            } else {
                output = NS.LANG.getLang(this.language + '.' + str);
            }
            return output;
        };
        this.getLabelObject = function (str, param) {
            var output = '';
            if (param) {
                output = NS.LANG.getLangObject(this.language + '.' + str, param);
            } else {
                output = NS.LANG.getLangObject(this.language + '.' + str);
            }
            return output;
        };
    };
    Function.prototype.map = function (arg1) {
        for (var i = 0; i < arg1.length; i++) {
            if (!this.prototype['Map']) {
                this.prototype['Map'] = [];
            }
            this.prototype.Map.push(arg1[i]);
        }
    };
    App.mets2.Model.prototype.autoOptionMapping = function (options) {
        for (var i in options) {
            if (options.hasOwnProperty(i)) {
                this.options[i] = options[i];
            }
        }
        for (var m = 0; m < this.Map.length; m++) {
            for (var o in this.Map[m]) {
                if (this.Map[m].hasOwnProperty(o)) {
                    if (o !== "default") {
                        if (typeof(this.Map[m][o]) == "object") {
                            var obj = this.Map[m][o];
                            for (var a in obj) {
                                if (this[o] == undefined) {
                                    this[o] = {};
                                }
                                if (obj.hasOwnProperty(a)) {
                                    if (this.options[obj[a]]) {
                                        this[o][a] = this.options[obj[a]];
                                    } else {
                                        this[o][a] = this.Map[m]['default'];
                                    }
                                }
                            }
                        } else {
                            if (this.options[this.Map[m][o]]) {
                                this[o] = this.options[this.Map[m][o]];
                            } else {
                                if (typeof(this[o]) !== "object") {
                                    this[o] = this.Map[m]['default'];
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    App.mets2.Controller = function (model, view) {
        this.model = model;
        this.view = view;
        this.event = new App.Observer();
        this.getModel = function () {
            return this.model;
        };
        this.getView = function () {
            return this.view;
        };
        this.disableDebugger = function () {
            this.model.debugMode = false;
        };
        this.isDebugActive = function () {
            return this.model.isDebugActive();
        };
        this.getLabel = function (str, param) {
            return this.model.getLabel(str, param);
        };
        this.getLabelObject = function (str, param) {
            return this.model.getLabelObject(str, param);
        };
    };
    App.mets2.Controller.prototype.autoBind = function () {
        var events = this.events;
        var buttons = this.model.button;
        for (var eventName in events) {
            if (events.hasOwnProperty(eventName)) {
                for (var btnName in buttons) {
                    if (buttons.hasOwnProperty(btnName)) {
                        if (btnName == eventName) {
                            var btn = buttons[btnName];
                            var obj = events[eventName];
                            (function (methodName, methods, contrl, btn) {
                                contrl[NS.UT.Tools.ucwords(methodName)] = function () {
                                    methods = $.extend(methods, contrl);
                                    methods.btn = btn;
                                    return methods;
                                };
                            })(btnName, obj.methods, this, btn);
                            for (var type in obj.events) {
                                if (obj.events.hasOwnProperty(type)) {
                                    (function (btn, obj, type, contrl) {
                                        btn.on(type + '.mets2', function () {
                                            obj.events[type].prototype = contrl;
                                            for (var name in obj.methods) {
                                                if (obj.methods.hasOwnProperty(name)) {
                                                    obj.events[type].prototype[name] = obj.methods[name];
                                                }
                                            }
                                            obj.events[type].prototype.btn = $(this);
                                            new obj.events[type]();
                                            return false;
                                        });
                                    })(btn, obj, type, this);
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    App.mets2.View = function (model) {
        this.model = model;
        this.getModel = function () {
            return this.model;
        };
        this.isDebugActive = function () {
            return this.model.isDebugActive();
        };
        this.getLabel = function (str, param) {
            return this.model.getLabel(str, param);
        };
        this.getLabelObject = function (str, param) {
            return this.model.getLabelObject(str, param);
        };
    };
})(jQuery);
NS.LANG.en = {'error': {'status': "status ({status}) ", 'code': '<b>Error status: {code}</b> on server request', 'exception': 'Exception on Document object, the incoming data causes dysfunction', 'image': 'Error on image remote request (object id {id})', 'page': 'Unable to load the page'}, errorCodes: {401: {'text': 'Access restricted', 'fn': 'warning', 'icon': 'file-access.png'}}, 'loader': {'page': 'loading pages', 'data': 'loading data', 'loading': {page: 'loading: {title}'}}, 'label': {'zoomin': 'zoom in', 'zoomout': 'zoom out', 'darker': 'darker', 'lighter': 'lighter', 'contrast': 'more contrast', 'contrastInvert': 'less contrast', 'rotateleft': 'rotate left', 'rotateright': 'rotate right', 'firstpage': 'first', 'previous': 'previous', 'next': 'next', 'lastpage': 'last', 'transcription': 'text', 'overview': 'thumbs', 'fullscreen': 'full screen', 'narrowscreen': 'narrow screen', 'share': 'embed', 'print': 'download/print', 'copyright': 'copyright', 'reset': 'reset', 'fullsize': 'full size page', 'help': 'help'}, copyright: {modal: {header: 'Copyright notice', body: '<div>Reproductions of material from the IISH collections will be delivered for use in research,<br />' + 'teaching, or private study. It is in the patron\'s obligation to determine and satify copyright or other ' + 'use restrictions when publishing or otherwise distributing materials found in the IISH\'s collections. </div>'}}, help: {modal: {header: 'Help', body: '<div>help text hier aub<br />' + 'help text hier aub, <br />' + ' help text hier aub </div>'}}};
(function ($) {
    App.mets2.Model.extend({layouts: {thumbnailIISG: {rows: 2, pages: 8, margin: 10, views: {bars: [false, [false, false, false, false, false, true, [
        {'transcription': false},
        {'overview': false},
        {'fullscreen': true}
    ]], false]}, permanentLink                            : {description: true, image: false}}}});
    App.mets2.Model.extend('getAmountOfThumbnailPages', function () {
        return this.layouts[this.getTypeLayout()].pages;
    });
    App.mets2.Model.extend('getThumbnailData', function () {
        return this.layouts[this.getTypeLayout()];
    });
    App.mets2.Model.extend('getSizeOfThumbnailPages', function (type) {
        var self = this;
        return{width: self.layouts[this.getTypeLayout()].width, height: self.layouts[this.getTypeLayout()].height}
    });
    App.mets2.View.extend('ThumbnailIISGLayout', function () {
        var self = this;
        var model = this.getModel();
        var canvas = this.Canvas();
        var methods = {name      : 'thumbnailIISG', cssClass: 'mets-layout-thumbnail', events: {click: function (page, controller) {
            model.enableFullScreen();
            controller.activateFullScreen();
            controller.Fullscreen().buttonFocus();
            return'PageFullScreenLayout';
        }}, getData              : function () {
            return model.getThumbnailData();
        }, getPermanentLinkConfig: function () {
            return this.getData().permanentLink;
        }, getEvents             : function () {
            return methods.events;
        }, getCSSClass           : function () {
            return methods.cssClass;
        }, getAmountPages        : function () {
            return model.getAmountOfThumbnailPages();
        }, getGridSize           : function () {
            var size = canvas.getSize(), data = model.getThumbnailData(), rows = data.rows, amount = data.pages, width = Math.floor(size.width / (amount / rows)) - (data.margin * 2), height = Math.floor(size.height / rows) - (data.margin * 2);
            return{width: width, height: height}
        }, whichUrlTypeToLoad    : function () {
            return'thumbnail_url';
        }, getPageParams         : function () {
            return{}
        }, update                : function () {
            var cells = model.getCanvasSelector().find('.mets-thumb-cell');
            var size = methods.getGridSize();
            var cell = [];
            for (var i = 0; i < cells.length; i++) {
                cell = $(cells[i]).width(size.width).height(size.height);
            }
        }, getImageWrapper       : function () {
            var size = methods.getGridSize();
            return $('<div>').width(size.width).height(size.height).addClass('mets-thumb-cell');
        }, getLayoutViews        : function () {
            return model.getThumbnailData().views;
        }};
        return methods;
    });
})(jQuery);
App.mets2.LayoutInterface = function () {
    this.name = "";
    this.getData = function () {
    };
    this.getAmountPages = function () {
    };
    this.getPageParams = function () {
    };
    this.getImageWrapper = function () {
    };
    this.whichUrlTypeToLoad = function () {
    };
    this.getCSSClass = function () {
    };
    this.getEvents = function () {
    };
    this.update = function () {
    };
    this.getLayoutViews = function () {
    };
    this.getPermanentLinkConfig = function () {
    };
};
(function ($) {
    App.mets2.Model.extend({layouts: {pageFullScreen: {pages: 1, scaleMargin: 25, views: {bars: [true, true, true]}, permanentLink: {description: true, image: true}}}});
    App.mets2.View.extend('PageFullScreenLayout', function () {
        var self = this;
        var model = self.getModel();
        var canvas = self.Canvas();
        var methods = {name      : 'pageFullScreen', cssClass: 'mets-layout-full-screen-page', getCSSClass: function () {
            return methods.cssClass;
        }, getAmountPages        : function () {
            return model.getAmountOfPagePages();
        }, getEvents             : function () {
            return{};
        }, getData               : function () {
            return model.getPageData();
        }, getPermanentLinkConfig: function () {
            return this.getData().permanentLink;
        }, whichUrlTypeToLoad    : function () {
            return'url';
        }, getImageWrapper       : function () {
            return[];
        }, getPageParams         : function () {
            var size = canvas.getSize();
            var param = model.getImageParam();
            if (!self.getModel().isFullSizeActive()) {
                return{'scale': 0, 'width': param.width || size.width, 'height': param.height || (size.height - model.getPageScaleMargin())}
            } else {
                return{};
            }
        }, getLayoutViews        : function () {
            return model.getPageData().views;
        }, update                : function () {
            var page = model.getCurrentLayoutPage();
            var size = canvas.getScaledSize();
            page.setUrl(page.getUrlByType(this.whichUrlTypeToLoad()));
            if (!self.getModel().isFullSizeActive()) {
                model.addParamToImage({width: size.width, height: (size.height - model.getPageScaleMargin())});
            }
            page.add();
        }};
        return methods;
    });
})(jQuery);
(function ($) {
    App.mets2.Model.extend({layouts: {page: {pages: 1, scaleMargin: 25, views: {bars: [false, [false, false, false, false, false, true, [
        {'transcription': false},
        {'overview': true},
        {'fullscreen': true}
    ]], false]}, permanentLink                    : {description: true, image: true}}}});
    App.mets2.Model.extend('getCurrentLayoutPage', function () {
        var pages = this.getLayoutPages();
        var pos = this.getPaginationPosition();
        if (pages.length == pos) {
            pos = pos - 1;
        }
        return this.getLayoutPages()[pos];
    });
    App.mets2.Model.extend('getPageScaleMargin', function () {
        return this.layouts[this.getTypeLayout()].scaleMargin;
    });
    App.mets2.Model.extend('getAmountOfPagePages', function () {
        return this.layouts[this.getTypeLayout()].pages;
    });
    App.mets2.Model.extend('getPageData', function () {
        return this.layouts[this.getTypeLayout()];
    });
    App.mets2.View.extend('PageLayout', function () {
        var self = this;
        var model = this.getModel();
        var canvas = this.Canvas();
        var methods = {name      : 'page', cssClass: 'mets-layout-page', getCSSClass: function () {
            return methods.cssClass;
        }, getAmountPages        : function () {
            return model.getAmountOfPagePages();
        }, getEvents             : function () {
            return{};
        }, getData               : function () {
            return model.getPageData();
        }, getPermanentLinkConfig: function () {
            return this.getData().permanentLink;
        }, whichUrlTypeToLoad    : function () {
            return'url';
        }, getImageWrapper       : function () {
            return[];
        }, getPageParams         : function () {
            var size = canvas.getSize();
            var param = model.getImageParam();
            if (!self.getModel().isFullSizeActive()) {
                return{'scale': 0, 'width': param.width || size.width, 'height': param.height || (size.height - model.getPageScaleMargin())}
            } else {
                return{};
            }
        }, getLayoutViews        : function () {
            return model.getPageData().views;
        }, update                : function () {
            var page = model.getCurrentLayoutPage();
            var size = canvas.getScaledSize();
            page.setUrl(page.getUrlByType(this.whichUrlTypeToLoad()));
            if (!self.getModel().isFullSizeActive()) {
                model.addParamToImage({width: size.width, height: (size.height - model.getPageScaleMargin())});
            }
            page.add();
        }};
        return methods;
    });
})(jQuery);
(function ($) {
    App.mets2.Model.extend({layouts: {thumbnailFullScreen: {rows: 3, pages: 15, margin: 10, views: {bars: [true, [false, false, false, false, false, true, [
        {'transcription': false},
        {'overview': false},
        {'fullscreen': true}
    ]], true]}, permanentLink                                   : {description: true, image: false}}}});
    App.mets2.View.extend('ThumbnailFullScreenLayout', function () {
        var self = this;
        var model = this.getModel();
        var canvas = this.Canvas();
        var methods = {name      : 'thumbnailFullScreen', cssClass: 'mets-layout-full-screen-thumbnail', events: {click: function (page, controller) {
            return'PageFullScreenLayout';
        }}, getData              : function () {
            return model.getThumbnailData();
        }, getPermanentLinkConfig: function () {
            return this.getData().permanentLink;
        }, getEvents             : function () {
            return methods.events;
        }, getCSSClass           : function () {
            return methods.cssClass;
        }, getAmountPages        : function () {
            return model.getAmountOfThumbnailPages();
        }, getGridSize           : function () {
            var size = canvas.getSize(), data = model.getThumbnailData(), rows = data.rows, amount = data.pages, width = Math.floor(size.width / (amount / rows)) - (data.margin * 2), height = Math.floor(size.height / rows) - (data.margin * 2);
            return{width: width, height: height}
        }, whichUrlTypeToLoad    : function () {
            return'thumbnail_url';
        }, getPageParams         : function () {
            return{}
        }, update                : function () {
            var cells = model.getCanvasSelector().find('.mets-thumb-cell');
            var size = methods.getGridSize();
            var cell = [];
            for (var i = 0; i < cells.length; i++) {
                cell = $(cells[i]).width(size.width).height(size.height);
            }
        }, getImageWrapper       : function () {
            var size = methods.getGridSize();
            return $('<div>').width(size.width).height(size.height).addClass('mets-thumb-cell');
        }, getLayoutViews        : function () {
            return model.getThumbnailData().views;
        }};
        return methods;
    });
})(jQuery);
(function ($) {
    App.mets2.Model.extend({layouts: {thumbnail: {rows: 2, pages: 8, margin: 10, views: {bars: [false, [false, false, false, false, false, true, [
        {'transcription': false},
        {'overview': false},
        {'fullscreen': true}
    ]], false]}, permanentLink                        : {description: true, image: false}}}});
    App.mets2.Model.extend('getAmountOfThumbnailPages', function () {
        return this.layouts[this.getTypeLayout()].pages;
    });
    App.mets2.Model.extend('getThumbnailData', function () {
        return this.layouts[this.getTypeLayout()];
    });
    App.mets2.Model.extend('getSizeOfThumbnailPages', function (type) {
        var self = this;
        return{width: self.layouts[this.getTypeLayout()].width, height: self.layouts[this.getTypeLayout()].height}
    });
    App.mets2.View.extend('ThumbnailLayout', function () {
        var self = this;
        var model = this.getModel();
        var canvas = this.Canvas();
        var methods = {name      : 'thumbnail', cssClass: 'mets-layout-thumbnail', events: {click: function (page, controller) {
            return'PageLayout';
        }}, getData              : function () {
            return model.getThumbnailData();
        }, getPermanentLinkConfig: function () {
            return this.getData().permanentLink;
        }, getEvents             : function () {
            return methods.events;
        }, getCSSClass           : function () {
            return methods.cssClass;
        }, getAmountPages        : function () {
            return model.getAmountOfThumbnailPages();
        }, getGridSize           : function () {
            var size = canvas.getSize(), data = model.getThumbnailData(), rows = data.rows, amount = data.pages, width = Math.floor(size.width / (amount / rows)) - (data.margin * 2), height = Math.floor(size.height / rows) - (data.margin * 2);
            return{width: width, height: height}
        }, whichUrlTypeToLoad    : function () {
            return'thumbnail_url';
        }, getPageParams         : function () {
            return{}
        }, update                : function () {
            var cells = model.getCanvasSelector().find('.mets-thumb-cell');
            var size = methods.getGridSize();
            var cell = [];
            for (var i = 0; i < cells.length; i++) {
                cell = $(cells[i]).width(size.width).height(size.height);
            }
        }, getImageWrapper       : function () {
            var size = methods.getGridSize();
            return $('<div>').width(size.width).height(size.height).addClass('mets-thumb-cell');
        }, getLayoutViews        : function () {
            return model.getThumbnailData().views;
        }};
        return methods;
    });
})(jQuery);
(function ($) {
    App.mets2.Controller.extend('request', function (args, options) {
        var self = this;
        options = options || {};
        if (this.isDebugActive()) {
            console.info("URL:   %c" + this.getModel().getUrl(), "color:#0247ae; font-weight: 800;");
            console.info("QUERY: %c" + this.parseQuery(args) + self.getModel().getCanvasScaleQueryParam(), "color:#0247ae; font-weight: 800;");
        }
        $.ajax({type: options.type || "GET", url: this.getModel().getUrl(), data: this.parseQuery(args) + self.getModel().getCanvasScaleQueryParam(), beforeSend: function () {
            self.event.fire('onBeforeSend');
        }, success  : function (data) {
            try {
                self.event.fire('onLoad');
                self.getModel().setDocument(data.document);
                if (self.isDebugActive()) {
                    console.info("MODEL:  ", self.getModel());
                }
                self.event.fire('onUpdated');
                if (data.document.code != "200") {
                    self.event.fire('onServerUserError', data.document.code);
                    self.event.fire('onError');
                } else {
                    self.event.fire('onSuccess');
                }
            } catch (err) {
                if (self.isDebugActive()) {
                    self.event.fire('onDocumentException', arguments);
                    var error = "SCRIPT ERROR: ";
                    for (var i in err) {
                        if (err.hasOwnProperty(i)) {
                            if (i == 'lineNumber') {
                                error += ' %oline: ' + err[i];
                            } else if (i == 'columnNumber') {
                                error += ', column: ' + err[i];
                            } else {
                                error += 'file: ' + err[i];
                            }
                        }
                    }
                    console.error(error, err);
                }
            }
        }, timeout  : options.timeout || 30000, error: function (jqXHR, textStatus, errorThrown) {
            self.event.fire('onServerError', arguments);
            self.event.fire('onError');
        }, dataType : options.dataType || "jsonp"});
    });
    App.mets2.Controller.extend('parseQuery', function (args) {
        var output = '';
        var c = 0;
        var value = '';
        for (var i in args) {
            if (args.hasOwnProperty(i)) {
                var amp = ((c == 0) ? '' : '&');
                if (typeof(args[i]) !== "object") {
                    value = args[i];
                    output += amp + i + '=' + value;
                } else if (typeof(args[i]) === "object") {
                    var a = 0;
                    if (a == 0) {
                        output += amp + i + '=true';
                    }
                    for (var d in args[i]) {
                        if (args[i].hasOwnProperty(d)) {
                            value = args[i][d];
                            output += amp + i + '.' + d + '=' + value;
                        }
                    }
                    a++;
                }
            }
            c++;
        }
        return output;
    });
})(jQuery);
(function ($) {
    App.mets2.Model.extend({breadcrumb: {length: 100, suffix: '...'}});
    App.mets2.Model.map([
        {'breadcrumb': {'length': 'ellipsis'}, 'default': 100},
        {'breadcrumb': {'suffix': 'ellipsisSuffix'}, 'default': '...'}
    ]);
    App.mets2.Model.extend('getEllipsisLength', function () {
        return this.breadcrumb.length;
    });
    App.mets2.Model.extend('getEllipsisSuffix', function () {
        return this.breadcrumb.suffix;
    });
    App.mets2.Model.extend('getBreadcrumb', function () {
        var breadcrumb = [];
        if (this.hasDocumentPages()) {
            if (this.getDocument()['breadcrumb']) {
                breadcrumb = this.getDocument().breadcrumb;
            } else {
                if (this.isDebugActive()) {
                    console.warn("WARING: breadcrumb is missing in [model.Document] ", this.getDocument());
                }
            }
        }
        return breadcrumb;
    });
    App.mets2.Model.extend('getBreadcrumbUrl', function () {
        var breadcrumbUrls = [];
        if (this.hasDocumentPages()) {
            if (this.getDocument()['breadcrumbUrls']) {
                breadcrumbUrls = this.getDocument().breadcrumbUrls;
            } else {
                if (this.isDebugActive()) {
                    console.warn("WARING: breadcrumbUrls is missing in [model.Document] ", this.getDocument());
                }
            }
        }
        return breadcrumbUrls;
    });
    App.mets2.View.extend('addBreadcrumb', function () {
        var ul = this.getModel().getFrameSelector().find('ul.mets-breadgrumb');
        var breadcrumb = this.getModel().getBreadcrumb();
        var breadcrumbUrl = this.getModel().getBreadcrumbUrl();
        ul.empty();
        var items = [];
        var totalLength = 0;
        for (var i = 0; i < breadcrumb.length; i++) {
            var a = $('<a>');
            var li = $('<li>');
            var I = $('<i>');
            if (i > 0) {
                I.addClass('mets-arrow').appendTo(li);
            }
            a.attr({'href': ((breadcrumbUrl[i]) ? breadcrumbUrl[i] : '#'), 'target': '_blank', 'title': breadcrumb[i]}).html(breadcrumb[i]).appendTo(li);
            li.appendTo(ul);
            items.push(a);
            totalLength = totalLength + a.text().length;
            a.ellipsistip({length: this.model.getEllipsisLength(), suffix: this.model.getEllipsisSuffix()});
        }
    });
})(jQuery);
(function ($) {
    App.mets2.Model.extend({brightness: {level: 0, max: 100, min: -200, steps: 10}});
    App.mets2.Model.extend('getBrightnessLevel', function () {
        return this.brightness.level;
    });
    App.mets2.Model.extend('setBrightnessLevel', function (level) {
        this.brightness.level = level;
    });
    App.mets2.Model.extend('getBrightnessSteps', function () {
        return this.brightness.steps;
    });
    App.mets2.Model.extend('getBrightnessMaximum', function () {
        return this.brightness.max;
    });
    App.mets2.Model.extend('getBrightnessMinimum', function () {
        return this.brightness.min;
    });
    App.mets2.Controller.route('darker', {events: {'click': function () {
        this.darken();
    }}, methods                                 : {darken: function () {
        var model = this.getModel();
        var level = model.getBrightnessLevel();
        if (level <= model.getBrightnessMinimum()) {
            level = model.getBrightnessMinimum();
        } else {
            level = level - model.getBrightnessSteps();
        }
        this.brightnessTo(level);
    }}});
    App.mets2.Controller.route('lighter', {events: {'click': function () {
        this.lighten();
    }}, methods                                  : {lighten: function () {
        var model = this.getModel();
        var level = model.getBrightnessLevel();
        if (level >= model.getBrightnessMaximum()) {
            level = model.getBrightnessMaximum();
        } else {
            level = level + model.getBrightnessSteps();
        }
        this.brightnessTo(level);
    }}});
    App.mets2.Controller.extend('brightnessTo', function (level) {
        var model = this.getModel();
        var page = model.getCurrentLayoutPage();
        var img = page.getImage();
        var loader = this.view.PageLoader();
        img.draggable({disabled: false});
        model.setBrightnessLevel(level);
        loader.open();
        loader.text('brightness to <b>' + level + '%</b>');
        $UT.delay(function () {
            model.addParamToImage({brightness: level});
            page.add();
            page.load(function () {
                loader.close();
            });
        }, 450);
    });
})(jQuery);
(function ($) {
    App.mets2.Model.extend({canvas: {selector: [], height: 0, width: 0}});
    App.mets2.Model.extend('getCanvasSize', function () {
        var canvas = this.canvas;
        return{width: canvas.width, height: canvas.height}
    });
    App.mets2.Model.extend('getCanvasScaleQueryParam', function () {
        return'&scale=true&scale.width=' + this.getCanvasSize().width + '&scale.height=' + this.getCanvasSize().height;
    });
    App.mets2.Model.extend('setCanvasSize', function (param) {
        if (param.width) {
            this.canvas.width = param.width;
        }
        if (param.height) {
            this.canvas.height = param.height;
        }
    });
    App.mets2.Model.extend('setCanvasSelector', function (selector) {
        this.canvas.selector = selector;
    });
    App.mets2.Model.extend('getCanvasSelector', function () {
        return this.canvas.selector;
    });
    App.mets2.View.extend('Canvas', function () {
        var model = this.getModel();
        var canvas = model.getCanvasSelector();
        return{getCanvas           : function () {
            return canvas;
        }, getSize                 : function () {
            return{width: canvas.width(), height: canvas.height()}
        }, getScaledSize           : function () {
            var size = this.getSize();
            var step = (model.getScaleSteps() * model.getZoomLevel()) / 100;
            return{width: Math.round(size.width + (size.width * step)), height: Math.round(size.height + (size.height * step))};
        }, setSize                 : function (opt) {
            model.setCanvasSize(opt);
            if (opt.width) {
                canvas.width(opt.width);
            }
            if (opt.height) {
                canvas.height(opt.height);
            }
        }, getImageCanvasQueryParam: function () {
            return'&scale=0&width=' + this.getSize().width + '&height=' + this.getSize().height;
        }, getScaleQueryParam      : function () {
            return model.getCanvasScaleQueryParam();
        }};
    });
})(jQuery);
(function ($) {
    App.mets2.View.extend('PageLoader', function (text) {
        var model = this.getModel();
        var loader = model.getFrameSelector().find('.mets-loader-frame');
        var label = loader.find('.mets-loader-text');
        var textLabel = text || label.text();
        var canvasSize = this.Canvas().getSize();
        var timer = {};
        var c = 0;
        this.methods = {text: function (text) {
            label.html(text);
            return this;
        }, setPosition      : function () {
            loader.css({'top': (canvasSize.height / 2) - (loader.height() / 2), 'left': (canvasSize.width / 2) - (loader.width() / 2)});
            return this;
        }, open             : function (fn) {
            label.html(textLabel);
            this.setPosition();
            loader.fadeIn(300, fn);
            return this;
        }, close            : function (fn) {
            loader.stop();
            loader.hide();
            if (fn) {
                fn();
            }
            if (timer['stop']) {
                timer.stop();
            }
            return this;
        }};
        return this.methods;
    });
    App.mets2.View.extend('MessageIcon', function () {
        var model = this.getModel();
        var icon = model.getCanvasSelector().find('.mets-notice-icon');
        if (icon.length == 0) {
            icon = $('<img>').addClass('mets-notice-icon');
            icon.appendTo(model.getCanvasSelector());
        }
        return methods = {error: function () {
            icon.attr('src', model.getThemePath() + 'file-error.png');
            return this;
        }, warning             : function () {
            icon.attr('src', model.getThemePath() + 'file-warning.png');
            return this;
        }, serUrl              : function (url) {
            icon.attr('src', model.getThemePath() + url);
            return this;
        }, scriptError         : function () {
            icon.attr('src', model.getThemePath() + 'script-error.png');
            return this;
        }, serverError         : function () {
            icon.attr('src', model.getThemePath() + 'server-error.png');
            return this;
        }, show                : function () {
            icon.fadeIn(500);
            return this;
        }, hide                : function () {
            icon.hide();
            return this;
        }, remove              : function () {
            icon.remove();
            return this;
        }}
    });
    App.mets2.View.extend('Messenger', function (_event) {
        var messenger = this.getModel().getFrameSelector().find('.mets-message');
        var iconView = this.MessageIcon();
        var events = _event;
        this.method = {events: null, open: function (fn) {
            messenger.fadeIn(700, fn);
            if (events) {
                events.fire('onMessageOpen');
            }
            return this;
        }, close             : function (fn) {
            this.hideIcon();
            messenger.fadeOut(700, function () {
                messenger.attr('class', 'mets-message mets-hide');
                iconView.hide();
                messenger.empty();
                if (fn) {
                    fn();
                }
                if (events) {
                    events.fire('onMessageClose');
                }
            });
            return this;
        }, info              : function (text) {
            this.open();
            messenger.html(text);
            return this;
        }, success           : function (text) {
            this.open();
            messenger.html(text);
            return this;
        }, error             : function (text) {
            this.open();
            messenger.html(text);
            messenger.addClass('mets-error');
            return this;
        }, warning           : function (text) {
            this.open();
            messenger.html(text);
            messenger.addClass('mets-warning');
            return this;
        }, getIcon           : function () {
            return iconView;
        }, hideIcon          : function () {
            iconView.hide();
            return this;
        }, showIcon          : function () {
            iconView.show();
            return this;
        }};
        return this.method;
    });
})(jQuery);
(function ($) {
    App.mets2.Model.extend({contrast: {level: 1, max: 5, min: 0, steps: 0.1}});
    App.mets2.Model.extend('getContrastLevel', function () {
        return this.contrast.level;
    });
    App.mets2.Model.extend('setContrastLevel', function (level) {
        this.contrast.level = level;
    });
    App.mets2.Model.extend('getContrastSteps', function () {
        return this.contrast.steps;
    });
    App.mets2.Model.extend('getContrastMaximum', function () {
        return this.contrast.max;
    });
    App.mets2.Model.extend('getContrastMinimum', function () {
        return this.contrast.min;
    });
    App.mets2.Controller.route('contrastInvert', {events: {'click': function () {
        this.down();
    }}, methods                                         : {down: function () {
        var model = this.getModel();
        var level = model.getContrastLevel();
        if (level <= model.getContrastMinimum()) {
            level = model.getContrastMinimum();
        } else {
            level = parseFloat(level - model.getContrastSteps());
        }
        this.contrastTo(level);
    }}});
    App.mets2.Controller.route('contrast', {events: {'click': function () {
        this.up();
    }}, methods                                   : {up: function () {
        var model = this.getModel();
        var level = model.getContrastLevel();
        if (level >= model.getContrastMaximum()) {
            level = model.getContrastMaximum();
        } else {
            level = parseFloat(level) + parseFloat(model.getContrastSteps());
        }
        this.contrastTo(level);
    }}});
    App.mets2.Controller.extend('contrastTo', function (level) {
        var model = this.getModel();
        var page = model.getCurrentLayoutPage();
        var img = page.getImage();
        var loader = this.view.PageLoader();
        img.draggable({disabled: false});
        level = level.toPrecision(2);
        model.setContrastLevel(level);
        loader.open();
        loader.text('contrast to <b>' + (level * 100) + '%</b>');
        $UT.delay(function () {
            model.addParamToImage({contrast: level});
            page.add();
            page.load(function () {
                loader.close();
            });
        }, 450);
    });
})(jQuery);
(function ($) {
    App.mets2.Controller.route('copyright', {events: {'click': function () {
        this.Copyright().openModal();
    }}, methods                                    : {openModal: function () {
        var modal = this.getView().Modal();
        var data = this.getLabelObject('copyright.modal');
        modal.setHeader(data.header).setBody(data.body).show();
    }}});
})(jQuery);
(function ($) {
    App.mets2.Model.extend({frame: {selector: [], height: 0, width: 0}, button: {}});
    App.mets2.Model.map([
        {'frame': {'selector': 'target'}, 'default': []},
        {'frame': {'height': 'height'}, 'default': 'auto'},
        {'frame': {width: 'width'}, 'default': 'auto'}
    ]);
    App.mets2.Model.extend('getButtons', function () {
        return this.button;
    });
    App.mets2.Model.extend('getFrameSelector', function () {
        return this.frame.selector;
    });
    App.mets2.Model.extend('getFrameSize', function () {
        return{width: this.getFrameSelector().width(), height: this.getFrameSelector().height()}
    });
    App.mets2.Model.extend('getFrameOptionSize', function () {
        return{width: this.frame.width, height: this.frame.height};
    });
    App.mets2.Model.extend('getButtonByName', function (name) {
        var output = [];
        if (this.button[name]) {
            output = this.button[name];
        }
        return output;
    });
    App.mets2.View.extend('Frame', function () {
        var self = this;
        var model = self.getModel();
        var frame = model.getFrameSelector();
        var canvas = self.Canvas();
        var toolbars = frame.find('.mets-toolbar, .mets-message');
        var bars = frame.find('.mets-bar');
        var _ = {renderAlignment: function () {
            var others = [];
            var rows = [];
            for (var i = 0; i < bars.length; i++) {
                var wraps = $(bars[i]).find('.mets-button-wrapper');
                var selectors = [];
                var fount = false;
                rows.push([]);
                others.push([]);
                for (var w = 0; w < wraps.length; w++) {
                    var elem = $(wraps[w]);
                    if (elem.hasClass('mets-align-center')) {
                        fount = true;
                        rows[i].push(elem);
                    }
                    if (!fount && elem.is(':visible')) {
                        others[i].push(elem);
                    }
                }
            }
            for (var r = 0; r < rows.length; r++) {
                var elemWidth = 0;
                var firstElem = rows[r][0];
                for (var c = 0; c < rows[r].length; c++) {
                    elemWidth += rows[r][c].outerWidth();
                    if (rows[r].length - 1 == c) {
                        var otherWidth = 0;
                        for (var o = 0; o < others[r].length; o++) {
                            otherWidth += others[r][o].outerWidth(true);
                        }
                        var width = method.getSize().width;
                        var margin = Math.round(((width / 2) - ((elemWidth / 2)) - otherWidth));
                        if (margin > 0) {
                            firstElem.css('margin-left', margin + 'px');
                        }
                    }
                }
            }
        }, setOptionHeight      : function () {
        }};
        var method = {release: function () {
            var aligns = frame.find('.mets-align-center');
            for (var c = 0; c < aligns.length; c++) {
                aligns.css('margin-left', 'auto');
            }
        }, updateCanvasSize  : function () {
            var toolbarHeights = 0;
            for (var i = 0; i < toolbars.length; i++) {
                var toolbar = $(toolbars[i]);
                if (toolbar.is(':visible')) {
                    toolbarHeights += toolbar.outerHeight();
                }
            }
            canvas.setSize({height: frame.height() - toolbarHeights, width: frame.width()});
        }, getSize           : function () {
            return{height: frame.height(), width: frame.width()}
        }, getSelector       : function () {
            return frame;
        }, getParentSelector : function () {
            return frame.parent();
        }, setOptionSize     : function () {
            var size = model.getFrameOptionSize();
            if (size.height != 'auto') {
                this.setSize({'height': size.height});
            }
            if (size.width != 'auto') {
                this.setSize({'width': size.width});
            }
        }, setSize           : function (opt) {
            if (opt.width) {
                frame.width(opt.width);
            }
            if (opt.height) {
                frame.height(opt.height);
            }
            this.updateCanvasSize();
        }, setAbsolute       : function () {
            var props = {'position': 'absolute', 'left': 0, 'top': 0, 'z-index': 10000};
            frame.css(props);
        }, setRelative       : function () {
            var props = {'position': 'relative', 'left': 'auto', 'top': 'auto', 'z-index': 'auto'};
            frame.css(props);
        }, render            : function () {
            this.updateCanvasSize();
            _.renderAlignment();
        }};
        return method;
    });
})(jQuery);
(function ($) {
    App.mets2.Model.extend({fullScreen: {active: false, scrollPos: 0}});
    App.mets2.Model.extend('enableFullScreen', function () {
        this.fullScreen.active = true;
    });
    App.mets2.Model.extend('disableFullScreen', function () {
        this.fullScreen.active = false;
    });
    App.mets2.Model.extend('isFullScreenEnable', function () {
        return this.fullScreen.active;
    });
    App.mets2.Model.extend('getScrollPosition', function (pos) {
        return this.fullScreen.scrollPos;
    });
    App.mets2.Model.extend('setScrollPosition', function (pos) {
        this.fullScreen.scrollPos = pos;
    });
    App.mets2.Controller.route('fullscreen', {events: {'click': function () {
        if (this.model.isFullScreenEnable()) {
            this.model.disableFullScreen();
            this.buttonBlur();
            this.deactivate();
            this.btn.attr('data-original-title', this.getLabel('label.fullscreen'));
        } else {
            this.model.enableFullScreen();
            this.buttonFocus();
            this.activate();
            this.btn.attr('data-original-title', this.getLabel('label.narrowscreen'));
        }
        this.fullScreenIcon();
    }}, methods                                     : {buttonFocus: function () {
        this.btn.addClass('mets-button-focus');
    }, buttonBlur                                                 : function () {
        this.btn.removeClass('mets-button-focus');
    }, activate                                                   : function () {
        this.activateFullScreen();
    }, deactivate                                                 : function () {
        this.deactivateFullScreen();
    }, fullScreenIcon                                             : function () {
        this.btn.find('i').toggleClass('narrowscreen');
    }}});
    App.mets2.Controller.extend('deactivateFullScreen', function () {
        var model = this.getModel();
        var frame = this.view.Frame();
        $('body').css('overflow', 'auto');
        $(window).scrollTop(model.getScrollPosition());
        $(window).unbind('resize.textview');
        this.event.fire('onResize');
        frame.setRelative();
        frame.release();
        var optionSize = model.getFrameOptionSize();
        frame.setSize({width: (optionSize.width == 'auto') ? frame.getParentSelector().width() : optionSize.width, height: (optionSize.height == 'auto') ? frame.getParentSelector().height() : optionSize.height});
        frame.render();
        this.event.fire('onRescaled');
    });
    App.mets2.Controller.extend('activateFullScreen', function () {
        var self = this;
        var model = self.getModel();
        var frame = self.view.Frame();
        $('body').css('overflow', 'hidden');
        model.setScrollPosition($(window).scrollTop());
        $(window).scrollTop(0);
        $(window).bind('resize.textview', function () {
            $UT.delay(function () {
                var optionSize = model.getFrameOptionSize();
                self.event.fire('onResize');
                frame.release();
                frame.setAbsolute();
                frame.setSize({width: $(window).width(), height: $(window).height()});
                frame.render();
                self.event.fire('onRescaled');
            }, 500);
        });
        self.event.fire('onResize');
        frame.release();
        frame.setAbsolute();
        frame.setSize({width: $(window).width(), height: $(window).height()});
        frame.render();
        self.event.fire('onRescaled');
    });
})(jQuery);
App.mets2.Model.extend({fullSize: {active: false}});
App.mets2.Model.extend('activateFullSize', function () {
    this.fullSize.active = true;
});
App.mets2.Model.extend('deactivateFullSize', function () {
    this.fullSize.active = false;
});
App.mets2.Model.extend('isFullSizeActive', function () {
    return this.fullSize.active;
});
App.mets2.Model.extend('addFullSizeParamToImage', function () {
    this.addParamToImage({'scale': 100, 'width': 0, 'height': 0});
});
App.mets2.Controller.route('fullsize', {events: {'click': function () {
    this.toFullSize();
}}, methods                                   : {toFullSize: function () {
    this.fullSize();
    this.model.activateFullSize();
}}});
App.mets2.Controller.extend('fullSize', function () {
    var self = this;
    var model = self.getModel();
    var page = model.getCurrentLayoutPage();
    if (page) {
        var img = page.getImage();
        var loader = this.getView().PageLoader();
        var canvas = this.getView().Canvas();
        img.css({'cursor': 'move'});
        model.setDraggingOptions({cursor: 'move', disabled: false});
        img.draggable(model.getDraggingOptions());
        loader.open();
        loader.text('zooming in to 100%');
        model.addParamToImage({'scale': 100, 'width': 0, 'height': 0});
        page.reload();
        page.load(function (img) {
            var canvasSize = canvas.getSize();
            var newSize = $UT.aspectRatio({currentHeight: canvasSize.height, currentWidth: canvasSize.width, newHeight: img.height});
            model.setZoomLevel(Math.floor((newSize.width / canvasSize.width) * model.getScaleSteps()) - model.getScaleSteps());
            model.addParamToImage({'scale': 0, 'width': newSize.width, 'height': newSize.height});
        });
        $UT.delay(function () {
            loader.close();
        }, 450);
    }
});
(function ($) {
    App.mets2.Controller.route('help', {events: {'click': function () {
        this.Help().openModal();
    }}, methods                               : {openModal: function () {
        var modal = this.getView().Modal();
        var data = this.getLabelObject('help.modal');
        modal.setHeader(data.header).setBody(data.body).show();
    }}});
})(jQuery);
(function ($) {
    App.mets2.Model.extend({layout: {type: "", current: "", pages: []}, layoutConfig: {toFullScreen: {'thumbnail': 'thumbnailFullScreen', 'page': 'pageFullScreen'}, toDefaultScreen: {'thumbnailFullScreen': 'thumbnail', 'pageFullScreen': 'page'}, toStart: {fullScreen: {'pageFullScreen': 'thumbnailFullScreen'}, defaultScreen: {'page': 'thumbnail'}}}});
    App.mets2.Model.map([
        {'layout': {'type': 'layout'}, 'default': "page"},
        {'layoutConfig': 'layoutConfig', 'default': {'toFullScreen': {'thumbnail': 'thumbnailFullScreen', 'page': 'pageFullScreen'}}},
        {'layoutConfig': 'layoutConfig', 'default': {'toDefaultScreen': {'thumbnailFullScreen': 'thumbnail', 'pageFullScreen': 'page'}}},
        {'layoutConfig': 'layoutConfig', 'toStart': {'fullScreen': {'pageFullScreen': 'thumbnailFullScreen'}, 'defaultScreen': {'page': 'thumbnail'}}}
    ]);
    App.mets2.Model.extend('getLayoutFullScreenConfig', function () {
        return this.layoutConfig.toFullScreen;
    });
    App.mets2.Model.extend('getLayoutDefaultScreenConfig', function () {
        return this.layoutConfig.toDefaultScreen;
    });
    App.mets2.Model.extend('getLayoutStartScreenConfig', function () {
        return this.layoutConfig.toStart;
    });
    App.mets2.Model.extend('getLayoutPages', function () {
        return this.layout.pages;
    });
    App.mets2.Model.extend('emptyLayoutPageStorage', function () {
        this.layout.pages.length = 0;
    });
    App.mets2.Model.extend('setImageToLayoutPages', function (Page) {
        this.layout.pages.push(Page);
    });
    App.mets2.Model.extend('getTypeLayout', function () {
        return this.layout.type;
    });
    App.mets2.Model.extend('setTypeLayout', function (type) {
        this.layout.type = type;
    });
    App.mets2.Model.extend('setLayout', function (layput) {
        this.layout.current = layput;
    });
    App.mets2.Model.extend('getLayout', function () {
        return this.layout.current;
    });
    App.mets2.Controller.extend('LayoutManager', function () {
        var controller = this;
        var model = controller.getModel();
        var view = controller.getView();
        var barSelectors = model.getFrameSelector().find('div.mets-bar');
        var template = model.getFrameSelector().find('img.mets-image');
        var _ = {parseViesOfLayouts: function (views) {
            var wrapperClass = model.getFrameSelector().find('.mets-button-wrapper');
            var wrp = wrapperClass;
            for (var a = 0; a < wrp.length; a++) {
                $(wrp[a]).show();
            }
            var btns = model.getButtons();
            for (b in btns) {
                if (btns.hasOwnProperty(b)) {
                    btns[b].show();
                }
            }
            for (var b = 0; b < views.bars.length; b++) {
                var bar = views.bars[b];
                var barSelector = barSelectors.eq(b);
                if (barSelector.length > 0) {
                    if (typeof(bar) === "boolean") {
                        if (bar === false) {
                            barSelector.hide();
                        } else {
                            barSelector.show();
                        }
                    } else if (typeof(bar) === "object") {
                        for (var w = 0; w < bar.length; w++) {
                            var wrapper = bar[w];
                            var wrapperSelector = barSelector.find(wrapperClass).eq(w);
                            if (typeof(wrapper) === "boolean") {
                                if (wrapper === false) {
                                    wrapperSelector.hide();
                                }
                            } else if (typeof(wrapper) === "object") {
                                for (var btn = 0; btn < wrapper.length; btn++) {
                                    var button = wrapper[btn];
                                    for (var name in button) {
                                        if (button.hasOwnProperty(name)) {
                                            var btnSelector = model.getButtonByName(name);
                                            if (btnSelector.length > 0) {
                                                if (button[name] === false) {
                                                    btnSelector.hide();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }, cloneImage              : function () {
            return template.clone();
        }, storeImages             : function (pages) {
            for (var i = 0; i < pages.length; i++) {
                var data = pages[i];
                data['img'] = _.cloneImage();
                var page = new view.Page(view, data);
                model.setImageToLayoutPages(page);
            }
        }, layoutEventHandler      : function (page) {
            var events = model.getLayout().getEvents();
            for (var e in events) {
                if (events.hasOwnProperty(e) && typeof(events[e]) === 'function') {
                    (function (event, page) {
                        page.getImage().bind(e + '.mets-img', function () {
                            var layout_fn = events[event](page, controller);
                            if (layout_fn) {
                                model.setTypeLayout(view[layout_fn]().name);
                                var manager = controller.LayoutManager();
                                model.setPaginationPosition(manager.getPageIndexById(page.getId()));
                                manager.init();
                                manager.removePages();
                                manager.setPages();
                                controller.getView().Frame().render();
                                manager.showPageById(page.getId());
                            }
                        });
                    })(e, page);
                }
            }
        }, loadLayout              : function (type) {
            if (view[type]) {
                model.setLayout(view[type]());
            } else {
                if (controller.isDebugActive()) {
                    console.error('WARNING ON LOADING: ' + type);
                }
            }
        }, setLayoutCSSReverence   : function () {
            model.getFrameSelector().attr('class', 'mets-container ' + model.getLayout().getCSSClass());
        }};
        var methods = {pageQueueLoader: function (Pages, pos, end, errorCount, iterator) {
            errorCount = (errorCount == undefined) ? 0 : errorCount;
            pos = (pos == undefined) ? 0 : pos;
            end = (end == undefined) ? Pages.length : end;
            iterator = (iterator == undefined) ? 0 : iterator;
            var self = this;
            var layout = model.getLayout();
            var page = Pages[pos];
            if (page) {
                controller.event.fire('onImageLoad', page, pos, end, iterator);
                page.addParam(layout.getPageParams());
                page.setUrl(page.getUrlByType(layout.whichUrlTypeToLoad()));
                page.add(layout.getImageWrapper());
                _.layoutEventHandler(page);
                page.load(function () {
                    if (pos < end && iterator < layout.getAmountPages()) {
                        pos++;
                        if (pos == end) {
                            controller.event.fire('onImageReady', page, pos, end);
                            controller.event.fire('onImageQueueReady', page, pos, end, errorCount);
                        }
                        else {
                            controller.event.fire('onImageReady', page, pos, end);
                            self.pageQueueLoader(Pages, pos, end, errorCount, ++iterator);
                        }
                    } else {
                        controller.event.fire('onImageQueueReady', page, pos, end, errorCount);
                    }
                });
                page.error(function () {
                    errorCount++;
                    if (pos == end) {
                        controller.event.fire('onImageQueueReady', page, pos, end, errorCount);
                    }
                    controller.event.fire('onImageError', page, pos, end, errorCount);
                    controller.event.fire('onError', errorCount);
                });
            } else {
                controller.event.fire('onImageQueueReady', page, pos, end, errorCount);
            }
        }, getLayoutByType            : function () {
            var type = model.getTypeLayout();
            return $UT.ucwords(type) + "Layout";
        }, setLayout                  : function (type) {
            _.loadLayout(type);
            App.mets2.Implement(model.getLayout(), 'LayoutInterface');
            return this;
        }, getLayout                  : function () {
            return model.getLayout();
        }, updateLayout               : function () {
            this.getLayout().update();
        }, getDocumentPages           : function () {
            return $.merge([], model.getDocumentPages());
        }, setPages                   : function () {
            var changed = false;
            if (controller.getModel().getPaginationSteps() !== this.getLayout().getAmountPages()) {
                changed = true;
            }
            controller.getModel().setPaginationSteps(this.getLayout().getAmountPages());
            if (changed) {
                controller.event.fire('onLayoutReady', this.getLayoutByType());
            }
            var docPages = this.getDocumentPages();
            var pages2 = this.getPages();
            if (pages2.length == 0) {
                _.storeImages(docPages);
            } else {
                for (var p = 0; p < docPages.length; p++) {
                    if (!this.pageIdExist(parseInt(docPages[p].pageId))) {
                        _.storeImages(docPages);
                    }
                }
            }
            return this;
        }, showPages                  : function () {
            var pages = this.getPages();
            var pos = controller.getModel().getPaginationPosition();
            var end = this.getLayout().getAmountPages() + pos;
            controller.event.fire('onStartQueueReady', pages);
            this.pageQueueLoader(pages, pos, end);
            return this;
        }, getPageIndexById           : function (id) {
            var pages = this.getPages();
            var i = 0;
            var fount = false;
            var index = 0;
            while (!fount && i < pages.length) {
                if (id == pages[i].getId()) {
                    fount = true;
                    index = i;
                }
                i++;
            }
            return((!fount) ? fount : index);
        }, pageIdExist                : function (id) {
            var pages = this.getPages();
            var i = 0;
            var fount = false;
            while (!fount && i < pages.length) {
                if (id == pages[i].getId()) {
                    fount = true;
                }
                i++;
            }
            return fount;
        }, showPageById               : function (id) {
            var pages = this.getPages();
            var match = null;
            var i = 0;
            var fount = false;
            while (!fount && i < pages.length) {
                if (id == pages[i].getId()) {
                    fount = true;
                    match = i;
                }
                i++;
            }
            if (match !== null) {
                controller.event.fire('onStartQueueReady', pages);
                this.pageQueueLoader(pages, match, match);
            }
            return this;
        }, getPages                   : function () {
            return model.getLayoutPages();
        }, getFirstPage               : function () {
            return this.getPages()[0];
        }, init                       : function () {
            _.setLayoutCSSReverence();
            _.parseViesOfLayouts(this.getLayout().getLayoutViews());
            return this;
        }, removePages                : function () {
            var pages = this.getPages();
            for (var p = 0; p < pages.length; p++) {
                pages[p].remove();
            }
            return this;
        }, isThumbnailTypeLayout      : function (subject) {
            return new RegExp("thumbnail", "gi").test(subject);
        }, isPageTypeLayout           : function (subject) {
            return new RegExp("page", "gi").test(subject);
        }, load                       : function () {
            _.loadLayout(methods.getLayoutByType());
            App.mets2.Implement(model.getLayout(), 'LayoutInterface');
            if (model.isDebugActive()) {
                console.log("MANAGER LOADED: %c" + $UT.ucwords(model.getTypeLayout()) + "Layout ", "color:#026502;", this.getLayout().getData());
            }
        }};
        methods.load();
        return methods;
    });
})(jQuery);
(function ($) {
    App.mets2.Model.map([
        {'debugMode': 'debug', 'default': false},
        {'language': 'language', 'default': 'en'}
    ]);
    App.mets2.Controller.extend('load', function () {
        var self = this;
        this.event.addListener('templateReady', function () {
            var params = self.getModel().getParam();
            self.getModel().setUrl(params.url);
            self.request(params);
        });
        this.loadTemplate();
    });
    App.mets2.Controller.extend('captureButtons', function () {
        var model = this.getModel();
        var buttons = model.getFrameSelector().find('.mets-button');
        for (var i = 0; i < buttons.length; i++) {
            var btn = $(buttons[i]);
            try {
                var name = btn.find('i').attr('class').replace(new RegExp("\\s|(mets-icon)", 'g'), '');
                var label = this.getLabel('label.' + name);
                if (!$UT.isEmpty(label)) {
                    btn.attr({'data-toggle': 'tooltip', 'title': label});
                    if (btn['tooltip']) {
                        btn.tooltip();
                    } else {
                        if (this.isDebugActive()) {
                            console.warn("WARING: $.tooltip(); is missing for label [" + label + "] ", btn);
                        }
                    }
                }
                model.button[name] = btn;
            } catch (e) {
            }
        }
    });
    App.mets2.Controller.extend('init', function (param) {
        var self = this;
        var model = this.getModel();
        this.event.addListener('templateReady', function () {
            model.setCanvasSelector(self.getModel().getFrameSelector().find('.mets-canvas'));
            self.captureButtons();
            self.autoBind();
            var frame = self.getView().Frame();
            var layoutManager = self.LayoutManager();
            var first = true;
            self.event.addListener('onLayoutReady', function (layoutName) {
                if (layoutManager.isThumbnailTypeLayout(layoutName)) {
                    self.model.resetZooming();
                }
                self.paginationPositionManager();
            });
            layoutManager.init();
            model.setParam(param);
            frame.setOptionSize();
            frame.render();
            self.event.addListener('onBeforeSend', function () {
                self.getView().Messenger(self.event).close();
                self.getView().PageLoader().open().text(self.getLabel('loader.page'));
            });
            self.event.addListener('onUpdated', function () {
                self.getModel().setPaginationLength(model.getDocumentPages().length);
                if (self.model.isDifferentMetsID()) {
                    self.model.resetPagination();
                    self.model.resetZooming();
                    self.model.emptyLayoutPageStorage();
                    self.model.resetParamImage();
                    self.model.setMetsID(self.model.getDocument().metsId);
                }
                layoutManager.removePages();
            });
            self.event.addListener('onServerError', function (jqXHR, textStatus, errorThrown) {
                errorThrown = (errorThrown == undefined) ? 'error' : textStatus;
                textStatus = (textStatus == undefined) ? 'unknown' : textStatus;
                self.getView().Messenger(self.event).error(errorThrown + " " + self.getLabel('error.status', {status: textStatus})).getIcon().serverError().show();
                self.getView().PageLoader().close();
            });
            self.event.addListener('onServerUserError', function (code) {
                var errorCode = self.getLabelObject('errorCodes');
                var text = '';
                for (var keyCode in errorCode) {
                    if (errorCode.hasOwnProperty(keyCode)) {
                        if (keyCode == code) {
                            text = errorCode[code].text;
                        }
                    }
                }
                if (!$UT.isEmpty(text)) {
                    var message = self.getView().Messenger(self.event);
                    message[errorCode[code].fn](self.getLabel('error.code', {code: code}) + " " + text);
                    message.getIcon().serUrl(errorCode[code].icon).show();
                    self.getView().PageLoader().close();
                } else {
                    self.getView().Messenger(self.event).error(self.getLabel('error.code', {code: code})).getIcon().serverError().show();
                    self.getView().PageLoader().close();
                }
            });
            self.event.addListener('onError', function (code) {
                frame.render();
                layoutManager.updateLayout();
            });
            self.event.addListener('onDocumentException', function () {
                self.getView().Messenger(self.event).error(self.getLabel('error.exception')).getIcon().scriptError().show();
                self.getView().PageLoader().close();
            });
            self.event.addListener('onLoad', function () {
                self.getView().PageLoader().open().text(self.getLabel('loader.data'));
            });
            self.event.addListener('onSuccess', function () {
                layoutManager.setPages();
                layoutManager.showPages();
                self.getView().addBreadcrumb();
            });
            self.event.addListener('onImageLoad', function (page) {
                if (self.getModel().isFullSizeActive()) {
                    self.getModel().addFullSizeParamToImage();
                }
                self.getView().paginationOverview();
                self.getView().PageLoader().open();
                self.getView().PageLoader().text(self.getLabel('loader.loading.page', {'title': page.getTitle()}));
                self.paginationButtonManager();
            });
            self.event.addListener('onImageReady', function (page, iterator, length) {
                self.getView().TextView().resize();
            });
            self.event.addListener('onImageError', function (page) {
                self.getView().Messenger(self.event).open().error(self.getLabel('error.image', {'id': page.getId()}));
            });
            self.event.addListener('onStartQueueReady', function () {
                self.Transcription().hide();
                self.getView().PermanentLink(layoutManager.getLayout().getPermanentLinkConfig()).show();
            });
            self.event.addListener('onImageQueueReady', function (page, pos, end, errorCount) {
                self.getView().PageLoader().close();
                if (errorCount == 0) {
                    self.getView().Messenger(self.event).close();
                    layoutManager.updateLayout();
                }
                self.addZooming();
                self.loadTextView();
            });
            self.event.addListener('onResize', function () {
                self.getView().PageLoader().setPosition();
                self.getView().TextView().resize();
                frame.render();
                var layoutType = self.getModel().getTypeLayout();
                var configLayout = {};
                if (self.getModel().isFullScreenEnable()) {
                    configLayout = self.getModel().getLayoutFullScreenConfig();
                    for (var name1 in configLayout) {
                        if (configLayout.hasOwnProperty(name1)) {
                            if (layoutType == name1) {
                                self.getModel().setTypeLayout(configLayout[name1]);
                                layoutManager.load();
                                layoutManager.removePages();
                                layoutManager.init();
                                layoutManager.setPages();
                                layoutManager.showPages();
                            }
                        }
                    }
                } else {
                    configLayout = self.getModel().getLayoutDefaultScreenConfig();
                    for (var name2 in configLayout) {
                        if (configLayout.hasOwnProperty(name2)) {
                            if (layoutType == name2) {
                                self.getModel().setTypeLayout(configLayout[name2]);
                                layoutManager.load();
                                layoutManager.removePages();
                                layoutManager.init();
                                layoutManager.setPages();
                                layoutManager.showPages();
                            }
                        }
                    }
                }
            });
            self.event.addListener('onRescaled', function () {
                layoutManager.updateLayout();
                self.getView().PageLoader().setPosition();
            });
            self.event.addListener('onTranscriptionReady', function () {
                self.getView().TextView().update();
            });
            self.event.addListener('onMessageOpen', function (code) {
            });
            self.event.addListener('onMessageClose', function (code) {
                frame.render();
            });
            self.getModel().getFrameSelector().show();
        });
    });
    App.mets2.Controller.extend('terminate', function (param) {
        this.getModel().getFrameSelector().empty();
    });
})(jQuery);
(function ($) {
    App.mets2.Model.extend({modal: {selector: '.mets-modal'}});
    App.mets2.Model.extend('getModalSelector', function () {
        return this.getFrameSelector().find(this.modal.selector);
    });
    App.mets2.View.extend('Modal', function () {
        var selector = this.getModel().getModalSelector().modal();
        var _ = {evenets: {setClose: function () {
            var elems = selector.find('.mets-close, .mets-btn-close');
            elems.unbind('click.close');
            elems.bind('click.close', function () {
                selector.modal('hide');
            });
        }}};
        var methods = {getHeader: function () {
            return selector.find('h3').html();
        }, setHeader            : function (value) {
            selector.find('h3').html(value);
            return this;
        }, getBody              : function () {
            return selector.find('.mets-modal-body').html();
        }, getBodySelector      : function () {
            return selector.find('.mets-modal-body');
        }, setBody              : function (value) {
            selector.find('.mets-modal-body').html(value);
            return this;
        }, getModal             : function () {
            return selector;
        }, show                 : function () {
            selector.modal('show');
            return this;
        }, close                : function () {
            selector.modal('hide');
            return this;
        }};
        _.evenets.setClose();
        return methods;
    });
})(jQuery);
(function ($) {
    App.mets2.Controller.route('overview', {events: {'click': function () {
        this.loadThumbLayout();
    }}, methods                                   : {loadThumbLayout: function () {
        var model = this.getModel();
        var layoutType = model.getTypeLayout();
        var manager = null;
        var configLayout = model.getLayoutStartScreenConfig();
        var config = {};
        if (model.isFullScreenEnable()) {
            config = configLayout.fullScreen;
        } else {
            config = configLayout.defaultScreen;
        }
        model.resetParamImage();
        for (var name in config) {
            if (config.hasOwnProperty(name)) {
                if (layoutType == name) {
                    model.setTypeLayout(config[name]);
                    manager = this.LayoutManager();
                    manager.init();
                    manager.removePages();
                    manager.init();
                    manager.setPages();
                    manager.showPages();
                    manager.updateLayout();
                }
            }
        }
    }}});
})(jQuery);
(function ($) {
    App.mets2.View.extend('Page', function (_view, _data) {
        this.data = _data;
        this.view = _view;
        this.model = this.view.getModel();
        this.doc = this.model.getDocument();
        this.page = this.data.img;
        this.id = parseInt(this.data.pageId);
        this.title = this.data.label;
        this.currentUrl = "";
        this.parent = [];
        this.add = function (parent) {
            this.parent = parent || [];
            if (this.model.getCanvasSelector().find('img#' + this.id).length == 0) {
                this.page.removeClass('mets-image').attr({'class': 'mets-page', 'id': this.getId()}).hide();
                if (this.parent.length == 0) {
                    this.parent = this.page;
                } else {
                    this.page.appendTo(this.parent);
                }
                this.parent.appendTo(this.model.getCanvasSelector());
            }
            if (this.model.hasDocumentPages()) {
                this.getImage().attr({'class': 'mets-page ', 'src': this.getUrl() + this.getParam()});
            } else {
                this.view.Messenger().warning(this.model.getLabel('error.page')).showIcon();
            }
            return this.page;
        };
        this.reload = function () {
            if (this.model.isDebugActive()) {
                console.info("IMAGE RELOAD: %c" + this.getUrl() + this.getParam(), "color:#043989; font-weight: 800;");
            }
            var loader = this.view.PageLoader();
            loader.text('Reload image');
            loader.open();
            this.getImage().attr({'class': 'mets-page ', 'src': this.getUrl() + this.getParam()});
            this.page.bind('load', function () {
                loader.close();
                $(this).unbind('load');
            });
        };
        this.getTranscriptionUrl = function () {
            return this.data.transcription_url;
        };
        this.getThumbnailUrl = function () {
            return this.data.thumbnail_url;
        };
        this.getPageUrl = function () {
            return this.data.url;
        };
        this.getId = function () {
            return this.id;
        };
        this.getUrlByType = function (type) {
            var url = "";
            switch (type) {
                case'thumbnail_url':
                {
                    url = this.getThumbnailUrl();
                }
                    break;
                case'transcription_url':
                {
                    url = this.getTranscriptionUrl();
                }
                    break;
                case'url':
                {
                    url = this.getPageUrl();
                }
                    break;
            }
            return url;
        };
        this.getUrl = function () {
            return this.currentUrl;
        };
        this.setUrl = function (url) {
            this.currentUrl = url;
        };
        this.getData = function () {
            var self = this;
            return self.data;
        };
        this.addParam = function (obj) {
            this.model.addParamToImage(obj);
        };
        this.getParam = function () {
            var temp = $.param(this.model.getImageParam());
            return($UT.isEmpty(temp) ? temp : '&' + temp);
        };
        this.getId = function () {
            return this.id;
        };
        this.getTitle = function () {
            return this.title;
        };
        this.getParent = function () {
            return this.parent;
        };
        this.remove = function () {
            if (this.getParent().length > 0) {
                this.getParent().remove();
            } else {
                this.getImage().remove();
            }
        };
        this.load = function (fn) {
            var self = this;
            $UT.Image().get({src: self.getUrl(), succes: function (img) {
                self.show();
                fn(img);
                if (self.model.isDebugActive()) {
                    console.info("IMAGE: %c" + self.getUrl() + self.getParam(), "color:#043989; font-weight: 800;");
                }
            }});
            this.page.bind('load', function () {
                self.page.unbind('load');
            });
            return this;
        };
        this.error = function (fn) {
            var self = this;
            $UT.Image().get({src: self.getUrl(), error: function () {
                if (self.model.isDebugActive()) {
                    console.warn("IMAGE ERROR: %c" + self.getUrl() + self.getParam());
                }
                self.page.removeClass('mets-thumbnail').addClass('mets-thumbnail-error').attr('src', self.model.getThemePath() + 'file-error.png');
                self.show();
                fn();
            }});
            return this;
        };
        this.getImage = function () {
            return this.page;
        };
        this.getImageSize = function () {
            return{width: this.page.width(), height: this.page.height()}
        };
        this.setImageSize = function (size, duration) {
            if (size.width) {
                this.page.width(size.width)
            }
            if (size.height) {
                this.page.height(size.height);
            }
            return this;
        };
        this.show = function (fn) {
            this.page.fadeIn(300, fn);
            return this;
        };
        this.hide = function (fn) {
            this.page.fadeOut(300, fn);
            return this;
        };
        this.isPortrait = function () {
            var size = this.getImageSize();
            return(size.height > size.width);
        };
        this.isLandscape = function () {
            var size = this.getImageSize();
            return(size.width > size.height);
        };
        this.getSize = function () {
            return{width: this.page.width(), height: this.page.height()}
        }
    });
})(jQuery);
(function ($) {
    App.mets2.Model.extend({pagination: {steps: 1, pos: 0, length: 0}, reset: {steps: 1, pos: 0, length: 0}});
    App.mets2.Model.extend('resetPagination', function () {
        this.pagination = jQuery.extend({}, this.pagination, this.pagination.reset);
    });
    App.mets2.Model.extend('setPaginationSteps', function (steps) {
        this.pagination.steps = steps;
    });
    App.mets2.Model.extend('getPaginationSteps', function () {
        return this.pagination.steps;
    });
    App.mets2.Model.extend('setPaginationLength', function (length) {
        this.pagination.length = length;
    });
    App.mets2.Model.extend('getPaginationLength', function () {
        return this.pagination.length;
    });
    App.mets2.Model.extend('getPaginationPosition', function () {
        return this.pagination.pos;
    });
    App.mets2.Model.extend('setPaginationPosition', function (pos) {
        if (this.hasDocumentPages()) {
            this.getDocumentPager().start = pos;
        }
        this.pagination.pos = pos;
    });
    App.mets2.Controller.route('next', {events: {'click': function () {
        var model = this.getModel();
        var steps = model.getPaginationSteps();
        var current = model.getPaginationPosition() + steps;
        var length = model.getPaginationLength();
        if (current < length) {
            this.goNext();
        }
    }}, methods                               : {goNext: function () {
        var model = this.getModel();
        var current = model.getPaginationPosition();
        var length = model.getPaginationLength();
        var params = model.getParam();
        if (current < length) {
            params.pager.start = (current + model.getPaginationSteps());
            model.setPaginationPosition(params.pager.start);
            this.event.fire('onUpdated');
            this.event.fire('onSuccess');
        }
    }, removeDisableClass                              : function () {
        this.btn.removeClass('mets-button-disable');
    }, addDisableClass                                 : function () {
        this.btn.addClass('mets-button-disable');
    }}});
    App.mets2.Controller.route('previous', {events: {'click': function () {
        var model = this.getModel();
        var steps = model.getPaginationSteps();
        var current = model.getPaginationPosition();
        if (current >= steps) {
            this.goPrev();
        }
    }}, methods                                   : {goPrev: function () {
        var model = this.getModel();
        var current = model.getPaginationPosition();
        var steps = model.getPaginationSteps();
        var params = model.getParam();
        if (current >= steps) {
            params.pager.start = current - steps;
            model.setPaginationPosition(params.pager.start);
            this.event.fire('onUpdated');
            this.event.fire('onSuccess');
        }
    }, removeDisableClass                                  : function () {
        this.btn.removeClass('mets-button-disable');
    }, addDisableClass                                     : function () {
        this.btn.addClass('mets-button-disable');
    }}});
    App.mets2.Controller.route('lastpage', {events: {'click': function () {
        this.goToLastPage();
    }}, methods                                   : {goToLastPage: function () {
        var model = this.getModel();
        var params = model.getParam();
        var length = model.getPaginationLength();
        var steps = model.getPaginationSteps();
        var mod = (length % steps);
        var pos = length - ((mod == 0) ? steps : mod);
        if (pos !== model.getPaginationPosition()) {
            params.pager.start = pos;
            model.setPaginationPosition(params.pager.start);
            this.event.fire('onUpdated');
            this.event.fire('onSuccess');
        }
    }, removeDisableClass                                        : function () {
        this.btn.removeClass('mets-button-disable');
    }, addDisableClass                                           : function () {
        this.btn.addClass('mets-button-disable');
    }}});
    App.mets2.Controller.route('firstpage', {events: {'click': function () {
        this.goToFirstPage();
    }}, methods                                    : {goToFirstPage: function () {
        var model = this.getModel();
        var params = model.getParam();
        var pos = model.getPaginationPosition();
        if (pos !== 0) {
            params.pager.start = 0;
            model.setPaginationPosition(params.pager.start);
            this.event.fire('onUpdated');
            this.event.fire('onSuccess');
        }
    }, removeDisableClass                                          : function () {
        this.btn.removeClass('mets-button-disable');
    }, addDisableClass                                             : function () {
        this.btn.addClass('mets-button-disable');
    }}});
    App.mets2.Controller.extend('paginationButtonManager', function () {
        var model = this.getModel();
        var pos = model.getPaginationPosition();
        var steps = model.getPaginationSteps();
        var length = model.getPaginationLength();
        var mod = (length % steps);
        var end = length - ((mod == 0) ? steps : mod);
        if (pos >= end) {
            this.Lastpage().addDisableClass();
            this.Firstpage().removeDisableClass();
            this.Next().addDisableClass();
            this.Previous().removeDisableClass();
        }
        else if (pos == 0) {
            this.Lastpage().removeDisableClass();
            this.Firstpage().addDisableClass();
            this.Next().removeDisableClass();
            this.Previous().addDisableClass();
        }
        else {
            this.Lastpage().removeDisableClass();
            this.Firstpage().removeDisableClass();
            this.Next().removeDisableClass();
            this.Previous().removeDisableClass();
        }
    });
    App.mets2.View.extend('paginationOverview', function () {
        var model = this.model;
        var label = model.getFrameSelector().find('.pagination-label');
        var steps = model.getPaginationSteps();
        var pos = model.getPaginationPosition();
        var length = model.getPaginationLength();
        var current = (pos % length) / steps;
        current = ((current < 1) ? 0 : (pos % length) / steps) + 1;
        label.html(Math.ceil(current) + " / " + Math.ceil(length / steps));
    });
    App.mets2.Controller.extend('paginationPositionManager', function () {
        var model = this.model;
        var steps = model.getPaginationSteps();
        var pos = model.getPaginationPosition();
        var length = model.getPaginationLength();
        if (steps > 1) {
            pos = ((Math.ceil(pos / steps) - 1) * steps);
            pos = ((pos < 0) ? 0 : pos);
            model.setPaginationPosition(pos);
        }
    });
})(jQuery);
(function ($) {
    App.mets2.Model.extend({permanentLink: {imageLinkSelector: '#mets-image-link', descriptionLinkSelector: '#mets-description-link'}});
    App.mets2.Model.extend('isMetsIdEmpty', function () {
        return($UT.isEmpty(this.getMetsID()));
    });
    App.mets2.Model.extend('getPermanentImageLinkSelector', function () {
        return this.getFrameSelector().find(this.permanentLink.imageLinkSelector);
    });
    App.mets2.Model.extend('getPermanentDescriptionLinkSelector', function () {
        return this.getFrameSelector().find(this.permanentLink.descriptionLinkSelector);
    });
    App.mets2.View.extend('PermanentLink', function (config) {
        var model = this.getModel();
        var imageLink = model.getPermanentImageLinkSelector();
        var descriptionLink = model.getPermanentDescriptionLinkSelector();
        return{getMetsID: function () {
            return model.getMetsID();
        }, isMetsIdEmpty: function () {
            return model.isMetsIdEmpty();
        }, show         : function () {
            if (imageLink.length > 0 && config.image) {
                var permanent_link = model.getCurrentLayoutPage().getThumbnailUrl().replace(new RegExp("3{1}$"), '2');
                imageLink.find('span').html(permanent_link);
                imageLink.fadeIn(300);
            }
            if (descriptionLink.length > 0 && !this.isMetsIdEmpty() && config.description) {
                descriptionLink.find('span').html(this.getMetsID().replace(new RegExp("\\?.*$"), ''));
                descriptionLink.fadeIn(300);
            }
            if (!config.description) {
                descriptionLink.hide();
            }
            if (!config.image) {
                imageLink.hide();
            }
        }};
    });
})(jQuery);
(function ($) {
    App.mets2.Controller.route('print', {events: {'click': function () {
        this.Print().open();
    }}, methods                                : {open: function () {
        window.open(this.getModel().getPDFurl(), '_blank');
    }}});
})(jQuery);
(function ($) {
    App.mets2.Controller.route('reset', {events: {'click': function () {
        this.Reset().reset();
    }}, methods                                : {reset: function () {
        var model = this.getModel();
        var page = model.getCurrentLayoutPage();
        var loader = this.view.PageLoader();
        model.setZoomLevel(0);
        var size = this.getView().Canvas().getScaledSize();
        model.deactivateFullSize();
        model.resetParamImage();
        model.addParamToImage({scale: 0, width: size.width, height: (size.height - model.getPageScaleMargin())});
        page.getImage().removeAttr('style');
        loader.open();
        loader.text('resetting...');
        page.reload();
    }}});
})(jQuery);
(function ($) {
    App.mets2.Model.extend({rotate: {angle: 0, max: 360, min: 0, steps: 90}});
    App.mets2.Model.extend('getRotateAngle', function () {
        return this.rotate.angle;
    });
    App.mets2.Model.extend('setRotateAngle', function (angle) {
        this.rotate.angle = angle;
    });
    App.mets2.Model.extend('getRotateSteps', function () {
        return this.rotate.steps;
    });
    App.mets2.Model.extend('getRotateMaximum', function () {
        return this.rotate.max;
    });
    App.mets2.Model.extend('getRotateMinimum', function () {
        return this.rotate.min;
    });
    App.mets2.Controller.route('rotateleft', {events: {'click': function () {
        this.rotate();
    }}, methods                                     : {rotate: function () {
        var model = this.getModel();
        var angle = model.getRotateAngle();
        if (angle == model.getRotateMinimum()) {
            angle = model.getRotateMaximum() - model.getRotateSteps();
        } else {
            angle = angle - model.getRotateSteps();
        }
        this.rotateTo(angle);
    }}});
    App.mets2.Controller.route('rotateright', {events: {'click': function () {
        this.rotate();
    }}, methods                                      : {rotate: function () {
        var model = this.getModel();
        var angle = model.getRotateAngle();
        if (angle == model.getRotateMaximum()) {
            angle = model.getRotateMinimum() + model.getRotateSteps();
        } else {
            angle = angle + model.getRotateSteps();
        }
        this.rotateTo(angle);
    }}});
    App.mets2.Controller.extend('rotateTo', function (angle) {
        var model = this.getModel();
        var page = model.getCurrentLayoutPage();
        var img = page.getImage();
        var loader = this.view.PageLoader();
        img.draggable({disabled: false});
        model.setRotateAngle(angle);
        loader.open();
        loader.text('rotate to <b>' + angle + '%</b>');
        $UT.delay(function () {
            model.addParamToImage({angle: angle});
            page.add();
            page.load(function () {
                loader.close();
            });
        }, 450);
    });
})(jQuery);
(function ($) {
    App.mets2.Model.extend({share: {link: {css: '/css/themes/default/style.css', js: '/js/mets2viewer.min.js'}, modal: {header: 'Embed code', body: '<table cellspacing="5" style="width: 100%;">' + '<tr>' + '<td colspan="2">' + '<textarea style="width: 520px; height: 150px; font-size: 11px; line-height: 14px; color: #595959; font-family: monospace;">' + "\n" + '<link href="{cssLink}" rel="stylesheet" type="text/css" media="all" />' + "\n" + '<script type="text/javascript" src="{jsLink}"></script>' + "\n" + '<script type="text/javascript">' + "\n" + "\t" + '(function($){' + "\n" + "\t" + '$(document).ready(function(){' + "\n" + "\t\t" + '$(\'#myMetsViewer\').mets2Viewer({' + "\n" + "\t\t" + '\'initialize\' : {' + "\n" + "\t\t" + '\'metsId\' : \'{metsLink}\',' + "\n" + "\t\t" + '\'pager\' : {' + "\n" + "\t\t" + '\'start\' : 0,' + "\n" + "\t\t" + '\'rows\' : -1' + "\n" + "\t\t" + '}' + "\n" + "\t\t" + '}' + "\n" + "\t\t" + '});' + "\n" + "\t" + '});' + "\n" + "\t" + '})(jQuery);' + "\n" + '</script>' + "\n" + '<div id="parent" style="width: 1000px; height: 500px;">' + "\n" + "\t" + '<div id="myMetsViewer"></div>' + "\n" + '</div>' + "\n" + '</textarea>' + '</td>' + '</tr>' + '</table>'}}});
    App.mets2.Model.extend('getShareModalData', function () {
        return this.share.modal;
    });
    App.mets2.Model.extend('getShareLinkData', function () {
        return this.share.link;
    });
    App.mets2.Controller.route('share', {events: {'click': function () {
        this.Share().openModal();
    }}, methods                                : {openModal: function () {
        var modal = this.getView().Modal();
        var data = this.getModel().getShareModalData();
        var link = this.getModel().getShareLinkData();
        data.body = data.body.replace(new RegExp("{cssLink}", "g"), this.getModel().getHostUrl() + link.css);
        data.body = data.body.replace(new RegExp("{jsLink}", "g"), this.getModel().getHostUrl() + link.js);
        data.body = data.body.replace(new RegExp("{metsLink}", "g"), this.getModel().getMetsID());
        modal.setHeader(data.header).setBody(data.body).show();
        modal.getBodySelector().find('textarea').focus();
        modal.getBodySelector().find('textarea').select();
    }}});
})(jQuery);
(function ($) {
    App.mets2.Model.extend({template: {host: 'http://mets2viewer.deontwikkelfabriek.nl', url: '', selector: []}});
    App.mets2.Model.map([
        {'template': {'url': 'template'}, 'default': 'http://mets2viewer.deontwikkelfabriek.nl/template/template.handler.php?callback=?'}
    ]);
    App.mets2.Model.extend('getHostUrl', function () {
        return this.template.host;
    });
    App.mets2.Model.extend('getTemplateUrl', function () {
        return this.template.url;
    });
    App.mets2.Model.extend('getTemplateSelector', function () {
        return this.template.selector;
    });
    App.mets2.Model.extend('addTemplateSelector', function () {
        this.template.selector = App.mets2.template.clone();
    });
    App.mets2.Model.extend('isTemplateEmpty', function () {
        return(NS.UT.Tools.isEmpty(App.mets2.template));
    });
    App.mets2.Controller.extend('loadTemplate', function () {
        var self = this;
        var model = self.getModel();
        if (this.isDebugActive() && model.getFrameSelector().length == 0) {
            console.warn('WARNING the jquery selector is missing: %o', model.getFrameSelector().selector);
        }
        if (NS.UT.Tools.isEmpty(model.getTemplateUrl())) {
            self.event.fire('templateReady');
        } else {
            if (model.isTemplateEmpty()) {
                if (this.isDebugActive()) {
                    console.info("TEMPLATE: %c" + model.getTemplateUrl(), "color:#0247ae; font-weight: 800;");
                }
                $.ajax({type: "GET", url: model.getTemplateUrl(), data: {}, beforeSend: function () {
                }, success  : function (data) {
                    if (data.template && !NS.UT.Tools.isEmpty(data.template)) {
                        App.mets2.template = $(data.template);
                        model.addTemplateSelector();
                    } else {
                    }
                    model.getFrameSelector().empty();
                    model.getTemplateSelector().appendTo(model.getFrameSelector());
                    self.event.fire('templateReady');
                }, error    : function (jqXHR, textStatus, errorThrown) {
                    $$(arguments);
                }, dataType : "jsonp"});
            } else {
                if (this.isDebugActive()) {
                    console.info("TEMPLATE: %c is loaded", "color:#0247ae; font-weight: 800;");
                }
                model.addTemplateSelector();
                model.getFrameSelector().empty();
                model.getTemplateSelector().appendTo(model.getFrameSelector());
                self.event.fire('templateReady');
            }
        }
    });
})(jQuery);
(function ($) {
    App.mets2.Model.extend({textView: {active: false, status: false, transcription: ''}});
    App.mets2.Model.extend('isTextViewEnabled', function () {
        return this.textView.status;
    });
    App.mets2.Model.extend('isTextViewActive', function () {
        return this.textView.active;
    });
    App.mets2.Model.extend('setTextViewActive', function (active) {
        this.textView.active = active;
    });
    App.mets2.Model.extend('enableTextView', function () {
        this.textView.status = true;
    });
    App.mets2.Model.extend('disableTextView', function () {
        this.textView.status = false;
    });
    App.mets2.Model.extend('getTranscription', function () {
        return this.textView.transcription;
    });
    App.mets2.Model.extend('setTranscription', function (text) {
        return this.textView.transcription = text;
    });
    App.mets2.Model.extend('isTranscriptionEmpty', function () {
        return $UT.isEmpty(this.textView.transcription);
    });
    App.mets2.Controller.route('transcription', {events: {'click': function () {
        if (this.model.isTextViewEnabled()) {
            if (!this.model.isTextViewActive()) {
                this.show();
            } else {
                this.hide();
            }
        }
    }}, methods                                        : {hide: function () {
        this.model.setTextViewActive(false);
        var textView = this.getView().TextView();
        this.buttonBlur();
        textView.hide();
    }, show                                                   : function () {
        this.model.setTextViewActive(true);
        var textView = this.getView().TextView();
        this.buttonFocus();
        textView.show();
    }, buttonFocus                                            : function () {
        this.btn.addClass('mets-button-focus');
    }, buttonBlur                                             : function () {
        this.btn.removeClass('mets-button-focus');
    }, removeDisableClass                                     : function () {
        this.btn.removeClass('mets-button-disable');
    }, addDisableClass                                        : function () {
        this.btn.addClass('mets-button-disable');
    }}});
    App.mets2.Controller.extend('loadTextView', function () {
        var self = this;
        var model = self.getModel();
        page = model.getCurrentLayoutPage();
        if (self.isDebugActive()) {
            console.group("TRANSCRIPTION: ");
            console.info("TRANSCRIPT URL: %c" + page.getTranscriptionUrl(), "color:#002f74; font-weight: bold;");
        }
        self.Transcription().addDisableClass();
        $.ajax({type: 'GET', url: page.getTranscriptionUrl(), beforeSend: function () {
            self.event.fire('beforeTranscriptionLoaded');
        }, success  : function (data) {
            try {
                model.setTranscription($UT.nl2br(data.transcription));
                if (self.isDebugActive()) {
                    console.log($UT.nl2br(data.transcription));
                    console.groupEnd();
                }
                self.event.fire('onTranscriptionReady');
                if (!model.isTranscriptionEmpty()) {
                    self.Transcription().removeDisableClass();
                    model.enableTextView();
                } else {
                    self.Transcription().addDisableClass();
                }
            } catch (e) {
                if (self.isDebugActive()) {
                    console.warn("WARNING: transcription object is missing ", data);
                }
            }
        }, timeout  : 30000, error: function (jqXHR, textStatus, errorThrown) {
            if (self.isDebugActive()) {
                console.error(errorThrown + "status (" + textStatus + ")");
            }
            self.event.fire('onTranscriptionError');
        }, dataType : "jsonp"});
    });
    App.mets2.View.extend('TextView', function () {
        var self = this;
        var model = self.getModel(), page = model.getCurrentLayoutPage(), canvas = self.Canvas();
        if (page) {
            var img = page.getImage(), canvasSize = canvas.getSize(), textView = canvas.getCanvas().find('.mets-text');
        }
        return{update : function () {
            textView.html(model.getTranscription());
            return this;
        }, getSelector: function () {
            return textView;
        }, show       : function () {
            this.resize();
            textView.fadeIn(400);
            return this;
        }, hide       : function () {
            if (img) {
                img.css({'margin': '15px auto'});
                textView.hide();
            }
            return this;
        }, resize     : function () {
            var thirdPart = 0, height = 0, margin = 0, maxHeight = 0;
            if (page.isPortrait()) {
                textView.removeClass('mets-text-horizontal').addClass('mets-text-vertical');
                if (model.isTextViewActive()) {
                    img.css({'margin-left': '15px'});
                }
                margin = parseInt(textView.css('top').replace(new RegExp('px'), ''));
                thirdPart = Math.round(canvasSize.width / 3);
                textView.width(thirdPart);
                maxHeight = canvasSize.height - ((margin * 2) + textView.innerHeight() - textView.height());
                height = Math.round((textView.height() < maxHeight) ? textView.height() : maxHeight);
                if (textView.height() <= maxHeight) {
                    textView.css('height', 'auto');
                } else {
                    textView.height(height);
                }
            }
            else {
                textView.removeClass('mets-text-vertical').addClass('mets-text-horizontal');
                img.css({'margin': '15px auto'});
                margin = parseInt(textView.css('left').replace(new RegExp('px'), ''));
                textView.width(Math.round(canvasSize.width - ((margin * 2) + (textView.innerWidth() - textView.width()))));
                maxHeight = canvasSize.height / 3;
                height = Math.round((textView.height() < maxHeight) ? textView.height() : maxHeight);
                textView.height(height);
            }
            return this;
        }};
    });
})(jQuery);
(function ($) {
    App.mets2.Model.extend({scaleVector: {steps: 10, max: 10000000, min: 300, level: 0, dragging: {cursor: 'default', disabled: true}, reset: {steps: 10, level: 0}}});
    App.mets2.Model.extend('resetZooming', function () {
        var page = this.getCurrentLayoutPage();
        if (page) {
            var img = page.getImage();
            img.css({'top': 'auto', 'left': 'auto', 'cursor': 'default'});
        }
        this.scaleVector = jQuery.extend({}, this.scaleVector, this.scaleVector.reset);
    });
    App.mets2.Model.extend('getDraggingOptions', function () {
        return this.scaleVector.dragging;
    });
    App.mets2.Model.extend('setDraggingOptions', function (options) {
        this.scaleVector.dragging = options;
    });
    App.mets2.Model.extend('getZoomLevel', function () {
        return this.scaleVector.level;
    });
    App.mets2.Model.extend('setZoomLevel', function (level) {
        this.scaleVector.level = level;
    });
    App.mets2.Model.extend('getScaleSteps', function () {
        return this.scaleVector.steps;
    });
    App.mets2.Model.extend('getScaleMaximum', function () {
        return this.scaleVector.max;
    });
    App.mets2.Model.extend('getScaleMinimum', function () {
        return this.scaleVector.min;
    });
    App.mets2.Controller.route('zoomin', {events: {'click': function () {
        this.zoomIn();
    }}, methods                                 : {zoomIn: function () {
        var model = this.getModel();
        var canvas = this.getView().Canvas();
        var size = canvas.getSize();
        var newSize = this.renderSize(size);
        if (newSize.width < model.getScaleMaximum()) {
            var level = model.getZoomLevel();
            model.setZoomLevel(++level);
            this.zoomTo(this.renderSize(size));
            this.removeDisableClass();
            this.Zoomout().removeDisableClass();
        } else {
            this.addDisableClass();
        }
        this.model.deactivateFullSize();
    }, removeDisableClass                                : function () {
        this.btn.removeClass('mets-button-disable');
    }, addDisableClass                                   : function () {
        this.btn.addClass('mets-button-disable');
    }, renderSize                                        : function (size) {
        var step = (this.model.getScaleSteps() * this.model.getZoomLevel()) / 100;
        return{width: Math.round(size.width + (size.width * step)), height: Math.round(size.height + (size.height * step))};
    }}});
    App.mets2.Controller.route('zoomout', {events: {'click': function () {
        this.zoomOut();
    }}, methods                                  : {zoomOut: function () {
        var model = this.getModel();
        var canvas = this.getView().Canvas();
        var size = canvas.getSize();
        var newSize = this.renderSize(size);
        if (newSize.width > model.getScaleMinimum()) {
            var level = model.getZoomLevel();
            model.setZoomLevel(--level);
            this.zoomTo(this.renderSize(size));
            this.removeDisableClass();
            this.Zoomin().removeDisableClass();
        } else {
            this.addDisableClass();
        }
        this.model.deactivateFullSize();
    }, removeDisableClass                                  : function () {
        this.btn.removeClass('mets-button-disable');
    }, addDisableClass                                     : function () {
        this.btn.addClass('mets-button-disable');
    }, renderSize                                          : function (size) {
        var step = (this.model.getScaleSteps() * this.model.getZoomLevel()) / 100;
        return{width: Math.round(size.width + (size.width * step)), height: Math.round(size.height + (size.height * step))};
    }}});
    App.mets2.Controller.extend('zoomTo', function (size) {
        var model = this.getModel();
        var page = model.getCurrentLayoutPage();
        var img = page.getImage();
        var loader = this.view.PageLoader();
        img.css({'cursor': 'move'});
        model.setDraggingOptions({cursor: 'move', disabled: false});
        img.draggable(model.getDraggingOptions());
        loader.open();
        loader.text('zoomming (' + model.getZoomLevel() + ')');
        $UT.delay(function () {
            model.addParamToImage({'scale': 0, 'width': size.width, 'height': size.height});
            page.reload();
            loader.close();
        }, 450);
    });
    App.mets2.Controller.extend('addZooming', function () {
        var self = this;
        var model = self.getModel();
        var page = model.getCurrentLayoutPage();
        if (page) {
            var img = page.getImage();
            img.draggable(model.getDraggingOptions());
            img.css({'cursor': model.getDraggingOptions().cursor});
            if ($.fn['mousewheel']) {
                img.on('mousewheel', function (event, delta) {
                    if (delta > 0) {
                        self.Zoomin().zoomIn();
                    } else {
                        self.Zoomout().zoomOut();
                    }
                });
            } else {
                if (this.isDebugActive()) {
                    console.warn("NOTICE scrolling plugin [mousewheel] is missing");
                }
            }
        }
    });
})(jQuery);

